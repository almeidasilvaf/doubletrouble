% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/duplicate_classification.R
\name{classify_gene_pairs}
\alias{classify_gene_pairs}
\title{Classify duplicate gene pairs based on their modes of duplication}
\usage{
classify_gene_pairs(
  blast_list = NULL,
  annotation = NULL,
  evalue = 1e-10,
  anchors = 5,
  max_gaps = 25,
  binary = FALSE,
  proximal_max = 10,
  blast_inter = NULL
)
}
\arguments{
\item{blast_list}{A list of data frames containing BLAST tabular output
for intraspecies comparisons.
Each list element corresponds to the BLAST output for a given species,
and names of list elements must match the names of list elements in
\code{annotation}. BLASTp, DIAMOND or simular programs must be run on processed
sequence data as returned by \code{process_input()}.}

\item{annotation}{A processed GRangesList or CompressedGRangesList object as
returned by \code{syntenet::process_input()}.}

\item{evalue}{Numeric scalar indicating the E-value threshold.
Default: 1e-10.}

\item{anchors}{Numeric indicating the minimum required number of genes
to call a syntenic block, as in \code{syntenet::infer_syntenet}.
Default: 5.}

\item{max_gaps}{Numeric indicating the number of upstream and downstream
genes to search for anchors, as in \code{syntenet::infer_syntenet}.
Default: 25.}

\item{binary}{Logical indicating whether to perform a binary classification
(i.e., whole-genome and small-scale duplication) or not. If FALSE,
small-scale duplications are subdivided into tandem, proximal, and dispersed
duplications. Default: FALSE.}

\item{proximal_max}{Numeric scalar with the maximum distance (in number
of genes) between two genes to consider them as proximal duplicates.
Default: 10.}
}
\value{
A list of 3-column data frames of duplicated gene pairs
(columns 1 and 2), and their modes of duplication (column 3).
}
\description{
Classify duplicate gene pairs based on their modes of duplication
}
\examples{
data(diamond_intra)
data(diamond_inter)
data(yeast_annot)
data(yeast_seq)
blast_list <- diamond_intra
blast_inter <- diamond_inter

pdata <- syntenet::process_input(yeast_seq, yeast_annot)
annot <- pdata$annotation["Scerevisiae"]

# Binary classification scheme
dup_binary <- classify_gene_pairs(blast_list, annot, binary = TRUE)
table(dup_binary$Scerevisiae$type)

# Expanded classification scheme
dup_exp <- classify_gene_pairs(blast_list, annot)
table(dup_exp$Scerevisiae$type)

# Full classification scheme
annotation <- pdata$annotation
dup_full <- classify_gene_pairs(
    blast_list, annotation, blast_inter = blast_inter
)
table(dup_full$Scerevisiae$type)
}
