[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to doubletrouble","title":"Contributing to doubletrouble","text":"outlines propose change doubletrouble. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to doubletrouble","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to doubletrouble","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to doubletrouble","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"almeidasilvaf/doubletrouble\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to doubletrouble","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to doubletrouble","text":"Please note doubletrouble project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with doubletrouble","title":"Getting help with doubletrouble","text":"Thanks using doubletrouble! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with doubletrouble","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with doubletrouble","text":"Armed reprex, next step figure ask. See also Bioconductor help website. ’s question: start community.rstudio.com, /StackOverflow. Bioconductor-related question, please ask Bioconductor Support Website using appropriate package tag (website send automatic email package authors). people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with doubletrouble","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"/articles/doubletrouble_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Identification and classification of duplicated genes","text":"Gene genome duplications source raw genetic material evolution (Ohno 2013). However, whole-genome duplications (WGD) small-scale duplications (SSD) contribute genome evolution different manners. help explore different contributions WGD SSD evolution, developed doubletrouble, package can used identify classify duplicated genes whole-genome protein sequences, calculate substitution rates per substitution site (.e., \\(K_a\\) \\(K_s\\)) gene pairs, find peaks \\(K_s\\) distributions, classify gene pairs age groups.","code":""},{"path":"/articles/doubletrouble_vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Identification and classification of duplicated genes","text":"can install doubletrouble Bioconductor following code: , can load package:","code":"if(!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"doubletrouble\")  ## Check that you have a valid Bioconductor installation BiocManager::valid() library(doubletrouble)"},{"path":"/articles/doubletrouble_vignette.html","id":"data-description","dir":"Articles","previous_headings":"","what":"Data description","title":"Identification and classification of duplicated genes","text":"vignette, use protein sequences (primary transcripts ) genome annotation yeast species Saccharomyces cerevisiae Candida glabrata. Data obtained Ensembl Fungi release 54 (Yates et al. 2022). example data sets stored following objects: yeast_seq: list AAStringSet objects elements named Scerevisiae Cglabrata. yeast_annot: GRangesList object elements named Scerevisiae Cglabrata. IMPORTANT: protein sequences FASTA files directory, can read list AAStringSet objects function fasta2AAStringSetlist() Bioconductor package syntenet. Likewise, can get GRangesList object GFF/GTF files function gff2GRangesList(), also syntenet. goal identify classify duplicated genes S. cerevisiae genome. C. glabrata genome used outgroup identify transposed duplicates later vignette.","code":"# Load list of DIAMOND tabular output data(yeast_seq) head(yeast_seq) #> $Scerevisiae #> AAStringSet object of length 6600: #>        width seq                                            names                #>    [1]  4910 MSQDRILLDLDVVNQRLILFNS...SELPEMLSLILRQYFTDLASS YLR106C #>    [2]  4092 MCKNEARLANELIEFVAATVTG...NYERLQAKEVASSTEQLLQEM YKR054C #>    [3]  3744 MSLTEQIEQFASRFRDDDATLQ...IGSAVSPRNLARTDVNFMPWF YHR099W #>    [4]  3268 MVLFTRCEKARKEKLAAGYKPL...ETLRGSLLLAINEGHEGFGLA YDR457W #>    [5]  3144 MLESLAANLLNRLLGSYVENFD...SLYRNIAIAVREYNKYCEAIL YLL040C #>    ...   ... ... #> [6596]    25 MFSLSNSQYTCQDYISDHIWKTSSH                      YOR302W #> [6597]    25 MRAKWRKKRTRRLKRKRRKVRARSK                      YDL133C-A #> [6598]    24 MHSNNSRQILIPHQNENMFLTELY                       YDL247W-A #> [6599]    24 MLVLYRKRFSGFRFYFLSIFKYII                       YBR191W-A #> [6600]    16 MLSLIFYLRFPSYIRG                               YJR151W-A #>  #> $Cglabrata #> AAStringSet object of length 5293: #>        width seq                                            names                #>    [1]  4880 MSIQSADTVVFDLDKAFQRRDE...VELPEMLALILRQYFSDLASQ CAGL0M11616g #>    [2]  4336 MYCIIRLCLLLLYMVRFAAAIV...ITFLGIKKCIILLIIVVVSIA CAGL0I10147g #>    [3]  4041 MVQRNIELARYITTLLIGVCPK...NDIESKVLDDTKQLLNSIEYV CAGL0K08294g #>    [4]  3743 MASADQISEYAEKLKDDQQSLA...ISASVNPRNLAKTDISFMPWF CAGL0A01914g #>    [5]  3247 MVKLTRFEKLQKEKNAEYFKPF...DTLRGSLLIAINEGHEGFGLA CAGL0K06303g #>    ...   ... ... #> [5289]    43 MLGAPISRDTPRKTRSKTQFFQGPIVSLITEKCTYEWGNPSIN    CAGL0M02541g #> [5290]    39 MLPGGPIVVLILVGLAACIIVATIIYRKWQERQRALARF        CAGL0M03305g #> [5291]    39 MLPGGVILVFILVGLAACAIVAVIIYRKWQERQRSLQRF        CAGL0L08008g #> [5292]    37 MINEGQLQTLVIGFGLAMVVLVVVYHAVASTMAVKRD          CAGL0C05461g #> [5293]    34 MQPTIEATQKDNTQEKRDNYIVKGFFWSPDCVIA             CAGL0C01919g # Load annotation list processed with syntenet::process_input() data(yeast_annot) head(yeast_annot) #> GRangesList object of length 2: #> $Scerevisiae #> GRanges object with 27144 ranges and 9 metadata columns: #>           seqnames        ranges strand |       type     phase #>              <Rle>     <IRanges>  <Rle> |   <factor> <integer> #>       [1]        I      1-230218      * | chromosome      <NA> #>       [2]        I       335-649      + | gene            <NA> #>       [3]        I       335-649      + | mRNA            <NA> #>       [4]        I       335-649      + | exon            <NA> #>       [5]        I       335-649      + | CDS                0 #>       ...      ...           ...    ... .        ...       ... #>   [27140]      XVI 944603-947701      + |       CDS          0 #>   [27141]      XVI 946856-947338      - |       gene      <NA> #>   [27142]      XVI 946856-947338      - |       mRNA      <NA> #>   [27143]      XVI 946856-947338      - |       exon      <NA> #>   [27144]      XVI 946856-947338      - |       CDS          0 #>                               ID                 Parent              Name #>                      <character>        <CharacterList>       <character> #>       [1]           chromosome:I                                     <NA> #>       [2]           gene:YAL069W                                     <NA> #>       [3] transcript:YAL069W_m..           gene:YAL069W              <NA> #>       [4]                   <NA> transcript:YAL069W_m..   YAL069W_mRNA-E1 #>       [5]            CDS:YAL069W transcript:YAL069W_m..              <NA> #>       ...                    ...                    ...               ... #>   [27140]            CDS:YPR204W transcript:YPR204W_m..              <NA> #>   [27141]         gene:YPR204C-A                                     <NA> #>   [27142] transcript:YPR204C-A..         gene:YPR204C-A              <NA> #>   [27143]                   <NA> transcript:YPR204C-A.. YPR204C-A_mRNA-E1 #>   [27144]          CDS:YPR204C-A transcript:YPR204C-A..              <NA> #>               gene_id  transcript_id           exon_id  protein_id #>           <character>    <character>       <character> <character> #>       [1]        <NA>           <NA>              <NA>        <NA> #>       [2]     YAL069W           <NA>              <NA>        <NA> #>       [3]        <NA>   YAL069W_mRNA              <NA>        <NA> #>       [4]        <NA>           <NA>   YAL069W_mRNA-E1        <NA> #>       [5]        <NA>           <NA>              <NA>     YAL069W #>       ...         ...            ...               ...         ... #>   [27140]        <NA>           <NA>              <NA>     YPR204W #>   [27141]   YPR204C-A           <NA>              <NA>        <NA> #>   [27142]        <NA> YPR204C-A_mRNA              <NA>        <NA> #>   [27143]        <NA>           <NA> YPR204C-A_mRNA-E1        <NA> #>   [27144]        <NA>           <NA>              <NA>   YPR204C-A #>   ------- #>   seqinfo: 31 sequences from an unspecified genome; no seqlengths #>  #> $Cglabrata #> GRanges object with 31671 ranges and 9 metadata columns: #>                         seqnames      ranges strand |     type     phase #>                            <Rle>   <IRanges>  <Rle> | <factor> <integer> #>       [1] ChrA_C_glabrata_CBS138    1-491328      * |   region      <NA> #>       [2] ChrA_C_glabrata_CBS138   1608-2636      - |   gene        <NA> #>       [3] ChrA_C_glabrata_CBS138   1608-2636      - |   mRNA        <NA> #>       [4] ChrA_C_glabrata_CBS138   1608-2636      - |   exon        <NA> #>       [5] ChrA_C_glabrata_CBS138   1608-2636      - |   CDS            0 #>       ...                    ...         ...    ... .      ...       ... #>   [31667] mito_C_glabrata_CBS138 15384-16067      + |     CDS          0 #>   [31668] mito_C_glabrata_CBS138 16756-17565      + |     gene      <NA> #>   [31669] mito_C_glabrata_CBS138 16756-17565      + |     mRNA      <NA> #>   [31670] mito_C_glabrata_CBS138 16756-17565      + |     exon      <NA> #>   [31671] mito_C_glabrata_CBS138 16756-17565      + |     CDS          0 #>                               ID                 Parent              Name #>                      <character>        <CharacterList>       <character> #>       [1] region:ChrA_C_glabra..                                     <NA> #>       [2]      gene:CAGL0A00105g                                     <NA> #>       [3] transcript:CAGL0A001..      gene:CAGL0A00105g              <NA> #>       [4]                   <NA> transcript:CAGL0A001.. CAGL0A00105g-T-E1 #>       [5]  CDS:CAGL0A00105g-T-p1 transcript:CAGL0A001..              <NA> #>       ...                    ...                    ...               ... #>   [31667]     CDS:CaglfMp11-T-p1 transcript:CaglfMp11-T              <NA> #>   [31668]         gene:CaglfMp12                                     COX3 #>   [31669] transcript:CaglfMp12-T         gene:CaglfMp12              <NA> #>   [31670]                   <NA> transcript:CaglfMp12-T    CaglfMp12-T-E1 #>   [31671]     CDS:CaglfMp12-T-p1 transcript:CaglfMp12-T              <NA> #>                gene_id  transcript_id           exon_id        protein_id #>            <character>    <character>       <character>       <character> #>       [1]         <NA>           <NA>              <NA>              <NA> #>       [2] CAGL0A00105g           <NA>              <NA>              <NA> #>       [3]         <NA> CAGL0A00105g-T              <NA>              <NA> #>       [4]         <NA>           <NA> CAGL0A00105g-T-E1              <NA> #>       [5]         <NA>           <NA>              <NA> CAGL0A00105g-T-p1 #>       ...          ...            ...               ...               ... #>   [31667]         <NA>           <NA>              <NA>    CaglfMp11-T-p1 #>   [31668]    CaglfMp12           <NA>              <NA>              <NA> #>   [31669]         <NA>    CaglfMp12-T              <NA>              <NA> #>   [31670]         <NA>           <NA>    CaglfMp12-T-E1              <NA> #>   [31671]         <NA>           <NA>              <NA>    CaglfMp12-T-p1 #>   ------- #>   seqinfo: 31 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/doubletrouble_vignette.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data preparation","title":"Identification and classification of duplicated genes","text":"First , need process list protein sequences gene ranges detect synteny syntenet. using function process_input() syntenet package. processed data represented list elements seq annotation, containing protein sequences gene ranges species, respectively. Finally, need perform pairwise sequence similarity searches identify whole set paralogous gene pairs. can using function run_diamond() syntenet package 1, setting compare = \"intraspecies\" perform intraspecies comparisons. voilà! Now DIAMOND output processed annotation, can classify duplicated genes.","code":"library(syntenet)  # Process input data pdata <- process_input(yeast_seq, yeast_annot)  # Inspect the output names(pdata) #> [1] \"seq\"        \"annotation\" pdata$seq #> $Scerevisiae #> AAStringSet object of length 6600: #>        width seq                                            names                #>    [1]  4910 MSQDRILLDLDVVNQRLILFNS...SELPEMLSLILRQYFTDLASS Sce_YLR106C #>    [2]  4092 MCKNEARLANELIEFVAATVTG...NYERLQAKEVASSTEQLLQEM Sce_YKR054C #>    [3]  3744 MSLTEQIEQFASRFRDDDATLQ...IGSAVSPRNLARTDVNFMPWF Sce_YHR099W #>    [4]  3268 MVLFTRCEKARKEKLAAGYKPL...ETLRGSLLLAINEGHEGFGLA Sce_YDR457W #>    [5]  3144 MLESLAANLLNRLLGSYVENFD...SLYRNIAIAVREYNKYCEAIL Sce_YLL040C #>    ...   ... ... #> [6596]    25 MFSLSNSQYTCQDYISDHIWKTSSH                      Sce_YOR302W #> [6597]    25 MRAKWRKKRTRRLKRKRRKVRARSK                      Sce_YDL133C-A #> [6598]    24 MHSNNSRQILIPHQNENMFLTELY                       Sce_YDL247W-A #> [6599]    24 MLVLYRKRFSGFRFYFLSIFKYII                       Sce_YBR191W-A #> [6600]    16 MLSLIFYLRFPSYIRG                               Sce_YJR151W-A #>  #> $Cglabrata #> AAStringSet object of length 5293: #>        width seq                                            names                #>    [1]  4880 MSIQSADTVVFDLDKAFQRRDE...VELPEMLALILRQYFSDLASQ Cgl_CAGL0M11616g #>    [2]  4336 MYCIIRLCLLLLYMVRFAAAIV...ITFLGIKKCIILLIIVVVSIA Cgl_CAGL0I10147g #>    [3]  4041 MVQRNIELARYITTLLIGVCPK...NDIESKVLDDTKQLLNSIEYV Cgl_CAGL0K08294g #>    [4]  3743 MASADQISEYAEKLKDDQQSLA...ISASVNPRNLAKTDISFMPWF Cgl_CAGL0A01914g #>    [5]  3247 MVKLTRFEKLQKEKNAEYFKPF...DTLRGSLLIAINEGHEGFGLA Cgl_CAGL0K06303g #>    ...   ... ... #> [5289]    43 MLGAPISRDTPRKTRSKTQFFQGPIVSLITEKCTYEWGNPSIN    Cgl_CAGL0M02541g #> [5290]    39 MLPGGPIVVLILVGLAACIIVATIIYRKWQERQRALARF        Cgl_CAGL0M03305g #> [5291]    39 MLPGGVILVFILVGLAACAIVAVIIYRKWQERQRSLQRF        Cgl_CAGL0L08008g #> [5292]    37 MINEGQLQTLVIGFGLAMVVLVVVYHAVASTMAVKRD          Cgl_CAGL0C05461g #> [5293]    34 MQPTIEATQKDNTQEKRDNYIVKGFFWSPDCVIA             Cgl_CAGL0C01919g pdata$annotation #> $Scerevisiae #> GRanges object with 6600 ranges and 1 metadata column: #>          seqnames        ranges strand |          gene #>             <Rle>     <IRanges>  <Rle> |   <character> #>      [1]    Sce_I       335-649      + |   Sce_YAL069W #>      [2]    Sce_I       538-792      + | Sce_YAL068W-A #>      [3]    Sce_I     1807-2169      - |   Sce_YAL068C #>      [4]    Sce_I     2480-2707      + | Sce_YAL067W-A #>      [5]    Sce_I     7235-9016      - |   Sce_YAL067C #>      ...      ...           ...    ... .           ... #>   [6596]  Sce_XVI 939922-941136      + |   Sce_YPR201W #>   [6597]  Sce_XVI 943032-943896      + |   Sce_YPR202W #>   [6598]  Sce_XVI 943880-944188      + |   Sce_YPR203W #>   [6599]  Sce_XVI 944603-947701      + |   Sce_YPR204W #>   [6600]  Sce_XVI 946856-947338      - | Sce_YPR204C-A #>   ------- #>   seqinfo: 17 sequences from an unspecified genome; no seqlengths #>  #> $Cglabrata #> GRanges object with 5293 ranges and 1 metadata column: #>                        seqnames      ranges strand |             gene #>                           <Rle>   <IRanges>  <Rle> |      <character> #>      [1] Cgl_ChrA_C_glabrata_..   1608-2636      - | Cgl_CAGL0A00105g #>      [2] Cgl_ChrA_C_glabrata_..   2671-4809      - | Cgl_CAGL0A00116g #>      [3] Cgl_ChrA_C_glabrata_.. 11697-13042      + | Cgl_CAGL0A00132g #>      [4] Cgl_ChrA_C_glabrata_.. 14977-15886      + | Cgl_CAGL0A00154g #>      [5] Cgl_ChrA_C_glabrata_.. 17913-19017      - | Cgl_CAGL0A00165g #>      ...                    ...         ...    ... .              ... #>   [5289] Cgl_mito_C_glabrata_.. 13275-13421      + |    Cgl_CaglfMp08 #>   [5290] Cgl_mito_C_glabrata_.. 13614-14396      + |    Cgl_CaglfMp09 #>   [5291] Cgl_mito_C_glabrata_.. 14631-14861      + |    Cgl_CaglfMp10 #>   [5292] Cgl_mito_C_glabrata_.. 15384-16067      + |    Cgl_CaglfMp11 #>   [5293] Cgl_mito_C_glabrata_.. 16756-17565      + |    Cgl_CaglfMp12 #>   ------- #>   seqinfo: 14 sequences from an unspecified genome; no seqlengths data(diamond_intra)  # Run DIAMOND in sensitive mode for S. cerevisiae only if(diamond_is_installed()) {     diamond_intra <- run_diamond(         seq = pdata$seq[\"Scerevisiae\"],         compare = \"intraspecies\",          outdir = file.path(tempdir(), \"diamond_intra\"),         ... = \"--sensitive\"     ) }  # Inspect output names(diamond_intra) #> [1] \"Scerevisiae_Scerevisiae\" head(diamond_intra$Scerevisiae_Scerevisiae) #>         query          db perc_identity length mismatches gap_open qstart qend #> 1 Sce_YLR106C Sce_YLR106C         100.0   4910          0        0      1 4910 #> 2 Sce_YLR106C Sce_YKR054C          22.4    420        254       19    804 1195 #> 3 Sce_YKR054C Sce_YKR054C         100.0   4092          0        0      1 4092 #> 4 Sce_YKR054C Sce_YLR106C          22.4    420        254       19   1823 2198 #> 5 Sce_YHR099W Sce_YHR099W         100.0   3744          0        0      1 3744 #> 6 Sce_YHR099W Sce_YJR066W          22.7    339        201       12   3351 3674 #>   tstart tend   evalue bitscore #> 1      1 4910 0.00e+00   9095.0 #> 2   1823 2198 1.30e-06     53.1 #> 3      1 4092 0.00e+00   7940.0 #> 4    804 1195 1.09e-06     53.1 #> 5      1 3744 0.00e+00   7334.0 #> 6   2074 2366 6.46e-08     57.0"},{"path":"/articles/doubletrouble_vignette.html","id":"classifying-duplicated-gene-pairs-and-genes","dir":"Articles","previous_headings":"","what":"Classifying duplicated gene pairs and genes","title":"Identification and classification of duplicated genes","text":"classify duplicated gene pairs based modes duplication, use function classify_gene_pairs(). function offers four different classification schemes, depending much detail want. classification schemes, along duplication modes identify required input, summarized table : Legend: SD, segmental duplication. SSD, small-scale duplication. TD, tandem duplication. PD, proximal duplication. TRD, transposon-derived duplication. rTRD, retrotransposon-derived duplication. dTRD, DNA transposon-derived duplication. DD, dispersed duplication. shown table, minimal input objects : blast_list: list data frames DIAMOND (BLASTp, etc.) tabular output intraspecies comparisons returned syntenet::run_diamond(..., compare = 'intraspecies'). annotation: processed annotation list (GRangesList object) returned syntenet::process_input(). However, also want identify transposon-derived duplicates (TRD) classify retrotransposon-derived duplicates (rTRD) DNA transposon-derived duplicates (dTRD), need following objects: blast_list: list data frames DIAMOND (BLASTp, etc.) tabular output interspecies comparisons (target species vs outgroup) returned syntenet::run_diamond(..., compare = <comparison_data_frame>). intron_counts: list data frames number introns per gene species, returned get_intron_counts(). , demonstrate classification scheme examples.","code":""},{"path":"/articles/doubletrouble_vignette.html","id":"the-binary-scheme-sd-vs-ssd","dir":"Articles","previous_headings":"Classifying duplicated gene pairs and genes","what":"The binary scheme (SD vs SSD)","title":"Identification and classification of duplicated genes","text":"binary scheme classifies duplicates derived either segmental duplications (SD) small-scale duplications (SSD). identify segmental duplicates, function classify_gene_pairs() performs intragenome synteny detection scans syntenet classifies detected anchor pairs segmental duplicates. remaining pairs classified originating small-scale duplications. scheme can used specifying scheme = \"binary\" function classify_gene_pairs(). function returns list data frames, containing duplicated gene pairs modes duplication species (, one species, list length 1).","code":"# Binary scheme c_binary <- classify_gene_pairs(     annotation = pdata$annotation,     blast_list = diamond_intra,     scheme = \"binary\" )  # Inspecting the output names(c_binary) #> [1] \"Scerevisiae\" head(c_binary$Scerevisiae) #>           dup1        dup2 type #> 9  Sce_YDR457W Sce_YER125W  SSD #> 10 Sce_YDR457W Sce_YJR036C  SSD #> 11 Sce_YDR457W Sce_YGL141W  SSD #> 12 Sce_YDR457W Sce_YKL010C  SSD #> 15 Sce_YBR140C Sce_YOL081W  SSD #> 21 Sce_YBL088C Sce_YBR136W  SSD  # How many pairs are there for each duplication mode? table(c_binary$Scerevisiae$type) #>  #>   SD  SSD  #>  342 3246"},{"path":"/articles/doubletrouble_vignette.html","id":"the-standard-scheme-ssd-td-pd-dd","dir":"Articles","previous_headings":"Classifying duplicated gene pairs and genes","what":"The standard scheme (SSD → TD, PD, DD)","title":"Identification and classification of duplicated genes","text":"Gene pairs derived small-scale duplications can classified originating tandem duplications (TD, genes adjacent ), proximal duplications (PD, genes separated genes), dispersed duplications (DD, duplicates fit previous categories). default classification scheme classify_gene_pairs(), can specified setting scheme = \"standard\".","code":"# Standard scheme c_standard <- classify_gene_pairs(     annotation = pdata$annotation,     blast_list = diamond_intra,     scheme = \"standard\" )  # Inspecting the output names(c_standard) #> [1] \"Scerevisiae\" head(c_standard$Scerevisiae) #>            dup1        dup2 type #> 124 Sce_YGR032W Sce_YLR342W   SD #> 176 Sce_YOR396W Sce_YPL283C   SD #> 189 Sce_YJL225C Sce_YIL177C   SD #> 275 Sce_YNR031C Sce_YCR073C   SD #> 285 Sce_YOR326W Sce_YAL029C   SD #> 312 Sce_YJL222W Sce_YIL173W   SD  # How many pairs are there for each duplication mode? table(c_standard$Scerevisiae$type) #>  #>   SD   TD   PD   DD  #>  342   42   80 3124"},{"path":"/articles/doubletrouble_vignette.html","id":"the-extended-scheme-ssd-td-pd-trd-dd","dir":"Articles","previous_headings":"Classifying duplicated gene pairs and genes","what":"The extended scheme (SSD → TD, PD, TRD, DD)","title":"Identification and classification of duplicated genes","text":"find transposon-derived duplicates (TRD), function classify_gene_pairs() detects syntenic regions target species outgroup species. Genes target species syntenic regions outgroup treated ancestral loci. , one gene duplicate pair ancestral locus, duplicate pair classified originating transposon-derived duplications. Since finding transposon-derived duplicates requires comparing target species outgroup species, first need perform similarity search target species outgroup. can syntenet::run_diamond(). parameter compare, pass 2-column data frame specifying comparisons made. 2 , identify duplicated gene pairs Saccharomyces cerevisiae using Candida glabrata outgroup. Now, pass interspecies DIAMOND output argument parameter blast_inter classify_gene_pairs().","code":"data(diamond_inter) # load pre-computed output in case DIAMOND is not installed  # Create data frame of comparisons to be made comparisons <- data.frame(     species = \"Scerevisiae\",     outgroup = \"Cglabrata\" ) comparisons #>       species  outgroup #> 1 Scerevisiae Cglabrata  # Run DIAMOND for the comparison we specified if(diamond_is_installed()) {     diamond_inter <- run_diamond(         seq = pdata$seq,         compare = comparisons,         outdir = file.path(tempdir(), \"diamond_inter\"),         ... = \"--sensitive\"     ) }  names(diamond_inter) #> [1] \"Scerevisiae_Cglabrata\" head(diamond_inter$Scerevisiae_Cglabrata) #>         query               db perc_identity length mismatches gap_open qstart #> 1 Sce_YLR106C Cgl_CAGL0M11616g          52.3   4989       2183       50      2 #> 2 Sce_YLR106C Cgl_CAGL0K08294g          23.1    347        215       12   1064 #> 3 Sce_YKR054C Cgl_CAGL0K08294g          26.5   4114       2753       81     83 #> 4 Sce_YKR054C Cgl_CAGL0M11616g          22.7    419        254       17   1823 #> 5 Sce_YHR099W Cgl_CAGL0A01914g          70.2   3761       1087       17      1 #> 6 Sce_YDR457W Cgl_CAGL0K06303g          55.5   3318       1355       39      1 #>   qend tstart tend   evalue bitscore #> 1 4909      5 4879 0.00e+00   4439.0 #> 2 1389   1770 2085 9.10e-07     53.5 #> 3 4089     87 4035 0.00e+00   1376.0 #> 4 2198    803 1194 7.59e-07     53.5 #> 5 3744      1 3743 0.00e+00   5200.0 #> 6 3268      1 3247 0.00e+00   3302.0 # Extended scheme c_extended <- classify_gene_pairs(     annotation = pdata$annotation,     blast_list = diamond_intra,     scheme = \"extended\",     blast_inter = diamond_inter )  # Inspecting the output names(c_extended) #> [1] \"Scerevisiae\" head(c_extended$Scerevisiae) #>            dup1        dup2 type #> 124 Sce_YGR032W Sce_YLR342W   SD #> 176 Sce_YOR396W Sce_YPL283C   SD #> 189 Sce_YJL225C Sce_YIL177C   SD #> 275 Sce_YNR031C Sce_YCR073C   SD #> 285 Sce_YOR326W Sce_YAL029C   SD #> 312 Sce_YJL222W Sce_YIL173W   SD  # How many pairs are there for each duplication mode? table(c_extended$Scerevisiae$type) #>  #>   SD   TD   PD  TRD   DD  #>  342   42   80 1015 2109"},{"path":"/articles/doubletrouble_vignette.html","id":"the-full-scheme-ssd-td-pd-rtrd-dtrd-dd","dir":"Articles","previous_headings":"Classifying duplicated gene pairs and genes","what":"The full scheme (SSD → TD, PD, rTRD, dTRD, DD)","title":"Identification and classification of duplicated genes","text":"Finally, full scheme consists classifying transposon-derived duplicates (TRD) originating retrotransposons (rTRD) DNA transposons (dTRD). , function classify_gene_pairs() uses number introns per gene find TRD pairs one gene least 1 intron, gene introns; case, pair classified originating activity retrotransposons (rTRD, .e., transposed gene without introns processed transcript retrotransposed back genome). TRD pairs classified DNA transposon-derived duplicates (dTRD). classify duplicates using scheme, first need create list data frames number introns per gene species. can done function get_intron_counts(), takes TxDb object input. TxDb objects store transcript annotations, can created family functions named makeTxDbFrom* GenomicFeatures package (see ?get_intron_counts() summary functions). , create list TxDb objects list GRanges objects using function MakeTxDbFromGRanges GenomicFeatures. Importantly, create TxDb GRanges, GRanges object must contain genomic coordinates features, including transcripts, exons, etc. , use annotation example data set yeast_annot, processed syntenet::process_input(). TxDb objects, can get intron counts per gene get_intron_counts(). Finally, can use list classify duplicates using full scheme follows:","code":"# Create a list of `TxDb` objects from a list of `GRanges` objects txdb_list <- lapply(yeast_annot, GenomicFeatures::makeTxDbFromGRanges) txdb_list #> $Scerevisiae #> TxDb object: #> # Db type: TxDb #> # Supporting package: GenomicFeatures #> # Genome: NA #> # Nb of transcripts: 6631 #> # Db created by: GenomicFeatures package from Bioconductor #> # Creation time: 2024-02-05 09:52:20 +0000 (Mon, 05 Feb 2024) #> # GenomicFeatures version at creation time: 1.54.3 #> # RSQLite version at creation time: 2.3.5 #> # DBSCHEMAVERSION: 1.2 #>  #> $Cglabrata #> TxDb object: #> # Db type: TxDb #> # Supporting package: GenomicFeatures #> # Genome: NA #> # Nb of transcripts: 5389 #> # Db created by: GenomicFeatures package from Bioconductor #> # Creation time: 2024-02-05 09:52:20 +0000 (Mon, 05 Feb 2024) #> # GenomicFeatures version at creation time: 1.54.3 #> # RSQLite version at creation time: 2.3.5 #> # DBSCHEMAVERSION: 1.2 # Get a list of data frames with intron counts per gene for each species intron_counts <- lapply(txdb_list, get_intron_counts)  # Inspecting the list names(intron_counts) #> [1] \"Scerevisiae\" \"Cglabrata\" head(intron_counts$Scerevisiae) #>    gene introns #> 1 Q0045       7 #> 2 Q0105       5 #> 3 Q0070       4 #> 4 Q0065       3 #> 5 Q0120       3 #> 6 Q0060       2 # Full scheme c_full <- classify_gene_pairs(     annotation = pdata$annotation,     blast_list = diamond_intra,     scheme = \"full\",     blast_inter = diamond_inter,     intron_counts = intron_counts )  # Inspecting the output names(c_full) #> [1] \"Scerevisiae\" head(c_full$Scerevisiae) #>            dup1        dup2 type #> 124 Sce_YGR032W Sce_YLR342W   SD #> 176 Sce_YOR396W Sce_YPL283C   SD #> 189 Sce_YJL225C Sce_YIL177C   SD #> 275 Sce_YNR031C Sce_YCR073C   SD #> 285 Sce_YOR326W Sce_YAL029C   SD #> 312 Sce_YJL222W Sce_YIL173W   SD  # How many pairs are there for each duplication mode? table(c_full$Scerevisiae$type) #>  #>   SD   TD   PD rTRD dTRD   DD  #>  342   42   80   52  963 2109"},{"path":"/articles/doubletrouble_vignette.html","id":"classifying-genes-into-unique-modes-of-duplication","dir":"Articles","previous_headings":"","what":"Classifying genes into unique modes of duplication","title":"Identification and classification of duplicated genes","text":"look carefully output classify_gene_pairs(), notice genes appear one duplicate pair, pairs can different duplication modes assigned. ’s nothing wrong . Consider, example, gene originated segmental duplication 60 million years ago, underwent tandem duplication 5 million years ago. output classify_gene_pairs(), ’d see gene two pairs, one SD type column, one TD. want assign gene unique mode duplication, can use function classify_genes(). function assigns duplication modes hierarchically using factor levels column type priority order. priority orders classification scheme : Binary: SD > SSD. Standard: SD > TD > PD > DD. Extended: SD > TD > PD > TRD > DD. Full: SD > TD > PD > rTRD > dTRD > DD. input classify_genes() list gene pairs returned classify_gene_pairs().","code":"# Classify genes into unique modes of duplication c_genes <- classify_genes(c_full)  # Inspecting the output names(c_genes) #> [1] \"Scerevisiae\" head(c_genes$Scerevisiae) #>          gene type #> 1 Sce_YGR032W   SD #> 2 Sce_YOR396W   SD #> 3 Sce_YJL225C   SD #> 4 Sce_YNR031C   SD #> 5 Sce_YOR326W   SD #> 6 Sce_YJL222W   SD  # Number of genes per mode table(c_genes$Scerevisiae$type) #>  #>   SD   TD   PD rTRD dTRD   DD  #>  683   67   70   71  883  836"},{"path":"/articles/doubletrouble_vignette.html","id":"calculating-substitution-rates-for-duplicated-gene-pairs","dir":"Articles","previous_headings":"","what":"Calculating substitution rates for duplicated gene pairs","title":"Identification and classification of duplicated genes","text":"can use function pairs2kaks() calculate rates nonsynonymous substitutions per nonsynonymous site (\\(K_a\\)), synonymouys substitutions per synonymous site (\\(K_s\\)), ratios (\\(K_a/K_s\\)). rates calculated using Bioconductor package MSA2dist, implements codon models KaKs_Calculator 2.0 (Wang et al. 2010). purpose demonstration, calculate \\(K_a\\), \\(K_s\\), \\(K_a/K_s\\) 5 TD-derived gene pairs. CDS TD-derived genes obtained Ensembl Fungi (Yates et al. 2022), stored cds_scerevisiae.","code":"data(cds_scerevisiae) head(cds_scerevisiae) #> DNAStringSet object of length 6: #>     width seq                                               names                #> [1]  3486 ATGGTTAATATAAGCATCGTAGC...TTGTCGCTTTATTACTGCTATAG YJR151C #> [2]  3276 ATGGGCGAAGGAACTACTAAGGA...TTAATATTGGTATTAAACAATGA YDR040C #> [3]  3276 ATGAGCGAGGGAACTGTCAAAGA...TTAATATCAGTGTCAAGCATTAA YDR038C #> [4]  3276 ATGAGCGAGGGAACTGTCAAAGA...TTAATATTGGTATTAAACAATGA YDR039C #> [5]  2925 ATGAACAGTATGGCCGATACCGA...CCATTACAACATTTCAAACATAA YAR019C #> [6]  2646 ATGCTGGAGTTTCCAATATCAGT...TAGCTGTTCTGTTCGCCTTCTAG YJL078C  # Store DNAStringSet object in a list cds_list <- list(Scerevisiae = cds_scerevisiae)  # Keep only top five TD-derived gene pairs for demonstration purposes td_pairs <- c_full$Scerevisiae[c_full$Scerevisiae$type == \"TD\", ] gene_pairs <- list(Scerevisiae = td_pairs[seq(1, 5, by = 1), ])  # Calculate Ka, Ks, and Ka/Ks kaks <- pairs2kaks(gene_pairs, cds_list)  # Inspect the output head(kaks) #> $Scerevisiae #>    dup1  dup2       Ka       Ks     Ka_Ks type #> 1 Q0055 Q0060      NaN      NaN       NaN   TD #> 2 Q0065 Q0060 0.420823 3.470190 0.1212680   TD #> 3 Q0070 Q0045 0.167734 0.411453 0.4076630   TD #> 4 Q0070 Q0065 0.258771 0.632833 0.4089090   TD #> 5 Q0055 Q0050 0.340984 6.018550 0.0566555   TD"},{"path":"/articles/doubletrouble_vignette.html","id":"identifying-and-visualizing-k_s-peaks","dir":"Articles","previous_headings":"","what":"Identifying and visualizing \\(K_s\\) peaks","title":"Identification and classification of duplicated genes","text":"Peaks \\(K_s\\) distributions typically indicate whole-genome duplication (WGD) events, can identified fitting Gaussian mixture models (GMMs) \\(K_s\\) distributions. doubletrouble, can performed function find_ks_peaks(). However, saturation higher \\(K_s\\) values, recent WGD events can reliably identified \\(K_s\\) distributions (Vanneste, Van de Peer, Maere 2013). Recent WGD events commonly found plant species, maize, soybean, apple, etc. Although genomes yeast species signatures WGD, events ancient, hard find evidence using \\(K_s\\) distributions. 3 demonstrate can find peaks \\(K_s\\) distributions find_ks_peaks(), use data frame containing \\(K_s\\) values duplicate pairs soybean (Glycine max) genome, undergone 2 WGDs events ~13 ~58 million years ago (Schmutz et al. 2010). , visualize \\(K_s\\) distributions peaks using function plot_ks_peaks(). First , let’s look data quick look distribution function plot_ks_distro() (details function data visualization section).  visual inspection, can see 2 3 peaks. Based prior knowledge, know 2 WGD events occurred ancestral Glycine genus ancestral Fabaceae, seem correspond peaks see \\(K_s\\) values around 0.1 0.5, respectively. third, flattened peak around 1.6, represent WGD shared eudicots. Let’s test number peaks support: 2 3.  can see, presence 3 peaks supported (lowest BIC). function returns list mean, variance amplitude mixture components (.e., peaks), well \\(K_s\\) distribution . Now, suppose just want get first 2 peaks. can explictly saying find_ks_peaks() many peaks .  Important consideration GMMs \\(K_s\\) distributions: Peaks identified GMMs blindly regarded “truth”. Using GMMs find peaks \\(K_s\\) distributions can lead problems overfitting overclustering (Tiley, Barker, Burleigh 2018). general recommendations : Use prior knowledge. know many peaks (e.g., based literature evidence), just tell number find_ks_peaks(). Likewise, sure many peaks , know maximum number peaks N, don’t test presence >N peaks. GMMs can incorrectly identify peaks actual number. Test significance peak SiZer (Significant ZERo crossings derivatives) maps (Chaudhuri Marron 1999). can done function SiZer() R package feature. example SiZer map, let’s use feature::SiZer() assess significance 2 peaks found previously.  blue regions SiZer map indicate significantly increasing regions curve, support 2 peaks found.","code":"# Load data and inspect it data(gmax_ks) head(gmax_ks) #>               dup1            dup2     Ks #> 1  GLYMA_01G000100 GLYMA_15G276800 0.3750 #> 3  GLYMA_01G000400 GLYMA_02G312300 0.0453 #> 8  GLYMA_01G000600 GLYMA_14G000400 0.1040 #> 10 GLYMA_01G000800 GLYMA_03G188200 0.4730 #> 11 GLYMA_01G000800 GLYMA_05G115300 1.2300 #> 12 GLYMA_01G000800 GLYMA_17G191100 1.6600  # Plot distribution plot_ks_distro(gmax_ks) # Find 2 and 3 peaks and test which one has more support peaks <- find_ks_peaks(gmax_ks$Ks, npeaks = c(2, 3), verbose = TRUE) #> Optimal number of peaks: 3 #> Bayesian Information Criterion (BIC):  #>           E         V #> 2 -86950.23 -67759.48 #> 3 -86977.58 -54202.26 #>  #> Top 3 models based on the BIC criterion:  #>       V,3       V,2       E,2  #> -54202.26 -67759.48 -86950.23 names(peaks) #> [1] \"mean\"   \"sd\"     \"lambda\" \"ks\" str(peaks) #> List of 4 #>  $ mean  : Named num [1:3] 0.118 0.531 1.482 #>   ..- attr(*, \"names\")= chr [1:3] \"1\" \"2\" \"3\" #>  $ sd    : num [1:3] 0.0549 0.2443 0.3134 #>  $ lambda: num [1:3] 0.352 0.433 0.215 #>  $ ks    : num [1:71232] 0.375 0.0453 0.104 0.473 1.23 1.66 1.72 0.13 0.0856 1.96 ...  # Visualize Ks distribution plot_ks_peaks(peaks) # Find 2 peaks ignoring Ks values > 1 peaks <- find_ks_peaks(gmax_ks$Ks, npeaks = 2, max_ks = 1) plot_ks_peaks(peaks) # Get numeric vector of Ks values <= 1 ks <- gmax_ks$Ks[gmax_ks$Ks <= 1]  # Get SiZer map feature::SiZer(ks) #> Warning: no DISPLAY variable so Tk is not available"},{"path":"/articles/doubletrouble_vignette.html","id":"classifying-genes-by-age-groups","dir":"Articles","previous_headings":"","what":"Classifying genes by age groups","title":"Identification and classification of duplicated genes","text":"Finally, can use peaks obtained classify gene pairs age group. Age groups defined based \\(K_s\\) peak pairs belong. useful want analyze duplicate pairs specific WGD event, instance. can function split_pairs_by_peak(). function returns list containing classified pairs data frame, ggplot object age boundaries highlighted histogram \\(K_s\\) values.","code":"# Gene pairs without age-based classification head(gmax_ks) #>               dup1            dup2     Ks #> 1  GLYMA_01G000100 GLYMA_15G276800 0.3750 #> 3  GLYMA_01G000400 GLYMA_02G312300 0.0453 #> 8  GLYMA_01G000600 GLYMA_14G000400 0.1040 #> 10 GLYMA_01G000800 GLYMA_03G188200 0.4730 #> 11 GLYMA_01G000800 GLYMA_05G115300 1.2300 #> 12 GLYMA_01G000800 GLYMA_17G191100 1.6600  # Classify gene pairs by age group pairs_age_group <- split_pairs_by_peak(gmax_ks, peaks)  # Inspecting the output names(pairs_age_group) #> [1] \"pairs\" \"plot\"  # Take a look at the classified gene pairs head(pairs_age_group$pairs) #>               dup1            dup2     ks peak #> 1  GLYMA_01G000100 GLYMA_15G276800 0.3750    1 #> 3  GLYMA_01G000400 GLYMA_02G312300 0.0453    1 #> 8  GLYMA_01G000600 GLYMA_14G000400 0.1040    1 #> 10 GLYMA_01G000800 GLYMA_03G188200 0.4730    1 #> 16 GLYMA_01G001000 GLYMA_08G359900 0.1300    1 #> 18 GLYMA_01G001100 GLYMA_08G359700 0.0856    1  # Visualize Ks distro with age boundaries pairs_age_group$plot"},{"path":"/articles/doubletrouble_vignette.html","id":"data-visualization","dir":"Articles","previous_headings":"","what":"Data visualization","title":"Identification and classification of duplicated genes","text":"Last least, doubletrouble provides users graphical functions produce publication-ready plots output classify_gene_pairs(), classify_genes(), pairs2kaks(). Let’s take look one one.","code":""},{"path":"/articles/doubletrouble_vignette.html","id":"visualizing-the-frequency-of-duplicates-per-mode","dir":"Articles","previous_headings":"Data visualization","what":"Visualizing the frequency of duplicates per mode","title":"Identification and classification of duplicated genes","text":"visualize frequency duplicated gene pairs genes duplication type (returned classify_gene_pairs() classify_genes(), respectively), first need create data frame counts duplicates2counts(). demonstrate works, use example data set duplicate pairs 3 fungi species (substitution rates, ignored duplicates2counts()). Now, let’s visualize frequency duplicate gene pairs duplication type function plot_duplicate_freqs(). can visualize frequencies three different ways, demonstrated .  want visually frequency duplicated genes (gene pairs), ’d first need classify genes unique modes duplication classify_genes(), repeat code . example:","code":"# Load data set with pre-computed duplicates for 3 fungi species data(fungi_kaks) names(fungi_kaks) #> [1] \"saccharomyces_cerevisiae\"  \"candida_glabrata\"          #> [3] \"schizosaccharomyces_pombe\" head(fungi_kaks$saccharomyces_cerevisiae) #>      dup1    dup2       Ka       Ks  Ka_Ks type #> 1 YGR032W YLR342W 0.058800 5.240000 0.0112   SD #> 2 YOR396W YPL283C 0.004010 0.009920 0.4040   SD #> 3 YJL225C YIL177C 0.000253 0.000758 0.3340   SD #> 4 YNR031C YCR073C 0.364000 5.070000 0.0718   SD #> 5 YOR326W YAL029C 0.396000 5.150000 0.0769   SD #> 6 YJL222W YIL173W 0.000276       NA     NA   SD  # Get a data frame of counts per mode in all species counts_table <- duplicates2counts(fungi_kaks |> classify_genes())  counts_table #>    type    n                   species #> 1    SD  683  saccharomyces_cerevisiae #> 2    TD   67  saccharomyces_cerevisiae #> 3    PD   70  saccharomyces_cerevisiae #> 4  rTRD    0  saccharomyces_cerevisiae #> 5  dTRD    0  saccharomyces_cerevisiae #> 6    DD 1790  saccharomyces_cerevisiae #> 7    SD   14          candida_glabrata #> 8    TD  104          candida_glabrata #> 9    PD   42          candida_glabrata #> 10 rTRD    0          candida_glabrata #> 11 dTRD    0          candida_glabrata #> 12   DD 1907          candida_glabrata #> 13   SD   53 schizosaccharomyces_pombe #> 14   TD   38 schizosaccharomyces_pombe #> 15   PD   48 schizosaccharomyces_pombe #> 16 rTRD    0 schizosaccharomyces_pombe #> 17 dTRD    0 schizosaccharomyces_pombe #> 18   DD 1853 schizosaccharomyces_pombe # A) Facets p1 <- plot_duplicate_freqs(counts_table)  # B) Stacked barplot, absolute frequencies p2 <- plot_duplicate_freqs(counts_table, plot_type = \"stack\")  # C) Stacked barplot, relative frequencies p3 <- plot_duplicate_freqs(counts_table, plot_type = \"stack_percent\")  # Combine plots, one per row patchwork::wrap_plots(p1, p2, p3, nrow = 3) +      patchwork::plot_annotation(tag_levels = \"A\") # Frequency of duplicated genes by mode classify_genes(fungi_kaks) |>   # classify genes into unique duplication types     duplicates2counts() |>      # get a data frame of counts (long format)     plot_duplicate_freqs()      # plot frequencies"},{"path":"/articles/doubletrouble_vignette.html","id":"visualizing-k_s-distributions","dir":"Articles","previous_headings":"Data visualization","what":"Visualizing \\(K_s\\) distributions","title":"Identification and classification of duplicated genes","text":"briefly demonstrated , plot \\(K_s\\) distribution whole paranome, use function plot_ks_distro().  However, visualizing distribution whole paranome can mask patterns happen duplicates originating particular duplication types. instance, looking evidence WGD events, visualizing \\(K_s\\) distribution SD-derived pairs can reveal whether syntenic genes cluster together, suggesting presence WGD history. visualize distribution duplication type, use bytype = TRUE plot_ks_distro().","code":"ks_df <- fungi_kaks$saccharomyces_cerevisiae  # A) Histogram, whole paranome p1 <- plot_ks_distro(ks_df, plot_type = \"histogram\")  # B) Density, whole paranome p2 <- plot_ks_distro(ks_df, plot_type = \"density\")   # C) Histogram with density lines, whole paranome p3 <- plot_ks_distro(ks_df, plot_type = \"density_histogram\")  # Combine plots side by side patchwork::wrap_plots(p1, p2, p3, nrow = 1) +     patchwork::plot_annotation(tag_levels = \"A\") # A) Duplicates by type, histogram p1 <- plot_ks_distro(ks_df, bytype = TRUE, plot_type = \"histogram\")  # B) Duplicates by type, violin p2 <- plot_ks_distro(ks_df, bytype = TRUE, plot_type = \"violin\")  # Combine plots side by side patchwork::wrap_plots(p1, p2) +     patchwork::plot_annotation(tag_levels = \"A\")"},{"path":"/articles/doubletrouble_vignette.html","id":"visualizing-substitution-rates-by-species","dir":"Articles","previous_headings":"Data visualization","what":"Visualizing substitution rates by species","title":"Identification and classification of duplicated genes","text":"function plot_rates_by_species() can used show distributions substitution rates (\\(K_s\\), \\(K_a\\), ratio \\(K_a/K_s\\)) species. can choose rate want visualize, whether group gene pairs duplication mode, demonstrated .","code":"# A) Ks for each species p1 <- plot_rates_by_species(fungi_kaks)  # B) Ka/Ks by duplication type for each species p2 <- plot_rates_by_species(fungi_kaks, rate_column = \"Ka_Ks\", bytype = TRUE)  # Combine plots - one per row patchwork::wrap_plots(p1, p2, nrow = 2) +     patchwork::plot_annotation(tag_levels = \"A\")"},{"path":"/articles/doubletrouble_vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Identification and classification of duplicated genes","text":"document created following conditions:","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.2 (2023-10-31) #>  os       Ubuntu 22.04.3 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2024-02-05 #>  pandoc   3.1.1 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package              * version     date (UTC) lib source #>  abind                  1.4-5       2016-07-21 [1] RSPM (R 4.3.0) #>  ade4                   1.7-22      2023-02-06 [1] RSPM (R 4.3.0) #>  AnnotationDbi          1.64.1      2023-11-03 [1] Bioconductor #>  ape                    5.7-1       2023-03-13 [1] RSPM (R 4.3.0) #>  Biobase                2.62.0      2023-10-24 [1] Bioconductor #>  BiocFileCache          2.10.1      2023-10-26 [1] Bioconductor #>  BiocGenerics           0.48.1      2023-11-01 [1] Bioconductor #>  BiocIO                 1.12.0      2023-10-24 [1] Bioconductor #>  BiocManager            1.30.22     2023-08-08 [2] CRAN (R 4.3.2) #>  BiocParallel           1.36.0      2023-10-24 [1] Bioconductor #>  BiocStyle            * 2.30.0      2023-10-24 [1] Bioconductor #>  biomaRt                2.58.2      2024-01-30 [1] Bioconductor 3.18 (R 4.3.2) #>  Biostrings             2.70.2      2024-01-28 [1] Bioconductor 3.18 (R 4.3.2) #>  bit                    4.0.5       2022-11-15 [1] RSPM (R 4.3.0) #>  bit64                  4.0.5       2020-08-30 [1] RSPM (R 4.3.0) #>  bitops                 1.0-7       2021-04-24 [1] RSPM (R 4.3.0) #>  blob                   1.2.4       2023-03-17 [1] RSPM (R 4.3.0) #>  bookdown               0.37        2023-12-01 [1] RSPM (R 4.3.0) #>  bslib                  0.6.1       2023-11-28 [2] RSPM (R 4.3.0) #>  cachem                 1.0.8       2023-05-01 [2] RSPM (R 4.3.0) #>  cli                    3.6.2       2023-12-11 [2] RSPM (R 4.3.0) #>  coda                   0.19-4.1    2024-01-31 [1] RSPM (R 4.3.0) #>  codetools              0.2-19      2023-02-01 [3] CRAN (R 4.3.2) #>  colorspace             2.1-0       2023-01-23 [1] RSPM (R 4.3.0) #>  crayon                 1.5.2       2022-09-29 [2] RSPM (R 4.3.0) #>  curl                   5.2.0       2023-12-08 [2] RSPM (R 4.3.0) #>  DBI                    1.2.1       2024-01-12 [1] RSPM (R 4.3.0) #>  dbplyr                 2.4.0       2023-10-26 [1] RSPM (R 4.3.0) #>  DelayedArray           0.28.0      2023-10-24 [1] Bioconductor #>  desc                   1.4.3       2023-12-10 [2] RSPM (R 4.3.0) #>  digest                 0.6.34      2024-01-11 [2] RSPM (R 4.3.0) #>  doParallel             1.0.17      2022-02-07 [1] RSPM (R 4.3.0) #>  doubletrouble        * 1.3.5       2024-02-05 [1] Bioconductor #>  dplyr                  1.1.4       2023-11-17 [1] RSPM (R 4.3.0) #>  evaluate               0.23        2023-11-01 [2] RSPM (R 4.3.0) #>  fansi                  1.0.6       2023-12-08 [2] RSPM (R 4.3.0) #>  farver                 2.1.1       2022-07-06 [1] RSPM (R 4.3.0) #>  fastmap                1.1.1       2023-02-24 [2] RSPM (R 4.3.0) #>  feature                1.2.15      2021-02-10 [1] RSPM (R 4.3.0) #>  filelock               1.0.3       2023-12-11 [1] RSPM (R 4.3.0) #>  foreach                1.5.2       2022-02-02 [1] RSPM (R 4.3.0) #>  fs                     1.6.3       2023-07-20 [2] RSPM (R 4.3.0) #>  generics               0.1.3       2022-07-05 [1] RSPM (R 4.3.0) #>  GenomeInfoDb           1.38.5      2023-12-28 [1] Bioconductor 3.18 (R 4.3.2) #>  GenomeInfoDbData       1.2.11      2024-01-03 [1] Bioconductor #>  GenomicAlignments      1.38.2      2024-01-16 [1] Bioconductor 3.18 (R 4.3.2) #>  GenomicFeatures        1.54.3      2024-01-31 [1] Bioconductor 3.18 (R 4.3.2) #>  GenomicRanges          1.54.1      2023-10-29 [1] Bioconductor #>  ggnetwork              0.5.12      2023-03-06 [1] RSPM (R 4.3.0) #>  ggplot2                3.4.4       2023-10-12 [1] RSPM (R 4.3.0) #>  glue                   1.7.0       2024-01-09 [2] RSPM (R 4.3.0) #>  gtable                 0.3.4       2023-08-21 [1] RSPM (R 4.3.0) #>  highr                  0.10        2022-12-22 [2] RSPM (R 4.3.0) #>  hms                    1.1.3       2023-03-21 [1] RSPM (R 4.3.0) #>  htmltools              0.5.7       2023-11-03 [2] RSPM (R 4.3.0) #>  htmlwidgets            1.6.4       2023-12-06 [2] RSPM (R 4.3.0) #>  httr                   1.4.7       2023-08-15 [2] RSPM (R 4.3.0) #>  igraph                 2.0.1.1     2024-01-30 [1] RSPM (R 4.3.0) #>  intergraph             2.0-4       2024-02-01 [1] RSPM (R 4.3.0) #>  IRanges                2.36.0      2023-10-24 [1] Bioconductor #>  iterators              1.0.14      2022-02-05 [1] RSPM (R 4.3.0) #>  jquerylib              0.1.4       2021-04-26 [2] RSPM (R 4.3.0) #>  jsonlite               1.8.8       2023-12-04 [2] RSPM (R 4.3.0) #>  KEGGREST               1.42.0      2023-10-24 [1] Bioconductor #>  KernSmooth             2.23-22     2023-07-10 [3] CRAN (R 4.3.2) #>  knitr                  1.45        2023-10-30 [2] RSPM (R 4.3.0) #>  ks                     1.14.2      2024-01-15 [1] RSPM (R 4.3.0) #>  labeling               0.4.3       2023-08-29 [1] RSPM (R 4.3.0) #>  lattice                0.22-5      2023-10-24 [3] RSPM (R 4.3.0) #>  lifecycle              1.0.4       2023-11-07 [2] RSPM (R 4.3.0) #>  magrittr               2.0.3       2022-03-30 [2] RSPM (R 4.3.0) #>  MASS                   7.3-60.0.1  2024-01-13 [3] RSPM (R 4.3.0) #>  Matrix                 1.6-5       2024-01-11 [3] RSPM (R 4.3.0) #>  MatrixGenerics         1.14.0      2023-10-24 [1] Bioconductor #>  matrixStats            1.2.0       2023-12-11 [1] RSPM (R 4.3.0) #>  mclust                 6.0.1       2023-11-15 [1] RSPM (R 4.3.0) #>  memoise                2.0.1       2021-11-26 [2] RSPM (R 4.3.0) #>  MSA2dist               1.6.0       2023-10-24 [1] Bioconductor #>  munsell                0.5.0       2018-06-12 [1] RSPM (R 4.3.0) #>  mvtnorm                1.2-4       2023-11-27 [1] RSPM (R 4.3.0) #>  network                1.18.2      2023-12-05 [1] RSPM (R 4.3.0) #>  networkD3              0.4         2017-03-18 [1] RSPM (R 4.3.0) #>  nlme                   3.1-164     2023-11-27 [3] RSPM (R 4.3.0) #>  patchwork              1.2.0       2024-01-08 [1] RSPM (R 4.3.0) #>  pheatmap               1.0.12      2019-01-04 [1] RSPM (R 4.3.0) #>  pillar                 1.9.0       2023-03-22 [2] RSPM (R 4.3.0) #>  pkgconfig              2.0.3       2019-09-22 [2] RSPM (R 4.3.0) #>  pkgdown                2.0.7       2022-12-14 [2] RSPM (R 4.3.0) #>  png                    0.1-8       2022-11-29 [1] RSPM (R 4.3.0) #>  pracma                 2.4.4       2023-11-10 [1] RSPM (R 4.3.0) #>  prettyunits            1.2.0       2023-09-24 [2] RSPM (R 4.3.0) #>  progress               1.2.3       2023-12-06 [1] RSPM (R 4.3.0) #>  purrr                  1.0.2       2023-08-10 [2] RSPM (R 4.3.0) #>  R6                     2.5.1       2021-08-19 [2] RSPM (R 4.3.0) #>  ragg                   1.2.7       2023-12-11 [2] RSPM (R 4.3.0) #>  rappdirs               0.3.3       2021-01-31 [2] RSPM (R 4.3.0) #>  RColorBrewer           1.1-3       2022-04-03 [1] RSPM (R 4.3.0) #>  Rcpp                   1.0.12      2024-01-09 [2] RSPM (R 4.3.0) #>  RCurl                  1.98-1.14   2024-01-09 [1] RSPM (R 4.3.0) #>  restfulr               0.0.15      2022-06-16 [1] RSPM (R 4.3.2) #>  rjson                  0.2.21      2022-01-09 [1] RSPM (R 4.3.0) #>  rlang                  1.1.3       2024-01-10 [2] RSPM (R 4.3.0) #>  rmarkdown              2.25        2023-09-18 [2] RSPM (R 4.3.0) #>  Rsamtools              2.18.0      2023-10-24 [1] Bioconductor #>  RSQLite                2.3.5       2024-01-21 [1] RSPM (R 4.3.0) #>  rtracklayer            1.62.0      2023-10-24 [1] Bioconductor #>  S4Arrays               1.2.0       2023-10-24 [1] Bioconductor #>  S4Vectors              0.40.2      2023-11-23 [1] Bioconductor 3.18 (R 4.3.2) #>  sass                   0.4.8       2023-12-06 [2] RSPM (R 4.3.0) #>  scales                 1.3.0       2023-11-28 [1] RSPM (R 4.3.0) #>  seqinr                 4.2-36      2023-12-08 [1] RSPM (R 4.3.0) #>  sessioninfo            1.2.2       2021-12-06 [2] RSPM (R 4.3.0) #>  SparseArray            1.2.3       2023-12-25 [1] Bioconductor 3.18 (R 4.3.2) #>  statnet.common         4.9.0       2023-05-24 [1] RSPM (R 4.3.0) #>  stringi                1.8.3       2023-12-11 [2] RSPM (R 4.3.0) #>  stringr                1.5.1       2023-11-14 [2] RSPM (R 4.3.0) #>  SummarizedExperiment   1.32.0      2023-10-24 [1] Bioconductor #>  syntenet             * 1.4.0       2023-10-24 [1] Bioconductor #>  systemfonts            1.0.5       2023-10-09 [2] RSPM (R 4.3.0) #>  textshaping            0.3.7       2023-10-09 [2] RSPM (R 4.3.0) #>  tibble                 3.2.1       2023-03-20 [2] RSPM (R 4.3.0) #>  tidyr                  1.3.1       2024-01-24 [1] RSPM (R 4.3.0) #>  tidyselect             1.2.0       2022-10-10 [1] RSPM (R 4.3.0) #>  utf8                   1.2.4       2023-10-22 [2] RSPM (R 4.3.0) #>  vctrs                  0.6.5       2023-12-01 [2] RSPM (R 4.3.0) #>  withr                  3.0.0       2024-01-16 [2] RSPM (R 4.3.0) #>  xfun                   0.41        2023-11-01 [2] RSPM (R 4.3.0) #>  XML                    3.99-0.16.1 2024-01-22 [1] RSPM (R 4.3.0) #>  xml2                   1.3.6       2023-12-04 [2] RSPM (R 4.3.0) #>  XVector                0.42.0      2023-10-24 [1] Bioconductor #>  yaml                   2.3.8       2023-12-11 [2] RSPM (R 4.3.0) #>  zlibbioc               1.48.0      2023-10-24 [1] Bioconductor #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabrício Almeida-Silva. Author, maintainer. Yves Van de Peer. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Almeida-Silva F, Van de Peer Y (2024). doubletrouble: Identification classification duplicated genes. R package version 1.3.5, https://github.com/almeidasilvaf/doubletrouble.","code":"@Manual{,   title = {doubletrouble: Identification and classification of duplicated genes},   author = {Fabrício Almeida-Silva and Yves {Van de Peer}},   year = {2024},   note = {R package version 1.3.5},   url = {https://github.com/almeidasilvaf/doubletrouble}, }"},{"path":"/index.html","id":"doubletrouble-","dir":"","previous_headings":"","what":"Identification and classification of duplicated genes","title":"Identification and classification of duplicated genes","text":"major goal doubletrouble identify duplicated genes whole-genome protein sequences classify based modes duplication. Duplicates can classified using four different classification schemes, increase complexity level details stepwise manner. classification schemes duplication modes can classify : Legend: SD, segmental duplication. SSD, small-scale duplication. TD, tandem duplication. PD, proximal duplication. TRD, transposon-derived duplication. rTRD, retrotransposon-derived duplication. dTRD, DNA transposon-derived duplication. DD, dispersed duplication. Besides classifying gene pairs, users can also classify genes, gene assigned unique mode duplication. Users can also calculate substitution rates per substitution site (.e., Ka, Ks ratios $\\frac{K_a}{K_s}$) duplicate pairs, find peaks Ks distributions Gaussian Mixture Models (GMMs), classify gene pairs age groups based Ks peaks.","code":""},{"path":"/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Identification and classification of duplicated genes","text":"Get latest stable R release CRAN. install doubletrouble Bioconductor using following code: development version GitHub :","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"doubletrouble\") BiocManager::install(\"almeidasilvaf/doubletrouble\")"},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Identification and classification of duplicated genes","text":"citation output using citation('doubletrouble') R. Please run check updates cite doubletrouble. Please note doubletrouble made possible thanks many R bioinformatics software authors, cited either vignettes /paper(s) describing package.","code":"print(citation('doubletrouble'), bibtex = TRUE) #> To cite package 'doubletrouble' in publications use: #>  #>   Almeida-Silva F, Van de Peer Y (2022). _doubletrouble: Identification #>   and classification of duplicated genes_. R package version 1.3.0, #>   <https://github.com/almeidasilvaf/doubletrouble>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {doubletrouble: Identification and classification of duplicated genes}, #>     author = {Fabrício Almeida-Silva and Yves {Van de Peer}}, #>     year = {2022}, #>     note = {R package version 1.3.0}, #>     url = {https://github.com/almeidasilvaf/doubletrouble}, #>   }"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Identification and classification of duplicated genes","text":"Please note doubletrouble project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"development-tools","dir":"","previous_headings":"","what":"Development tools","title":"Identification and classification of duplicated genes","text":"Continuous code testing possible thanks GitHub actions usethis, remotes, rcmdcheck customized use Bioconductor’s docker containers BiocCheck. Code coverage assessment possible thanks codecov covr. documentation website automatically updated thanks pkgdown. code styled automatically thanks styler. documentation formatted thanks devtools roxygen2. details, check dev directory. package developed using biocthis.","code":""},{"path":"/reference/cds_scerevisiae.html","id":null,"dir":"Reference","previous_headings":"","what":"Coding sequences (CDS) of S. cerevisiae — cds_scerevisiae","title":"Coding sequences (CDS) of S. cerevisiae — cds_scerevisiae","text":"Data obtained Ensembl Fungi, CDS primary transcripts included.","code":""},{"path":"/reference/cds_scerevisiae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coding sequences (CDS) of S. cerevisiae — cds_scerevisiae","text":"","code":"data(cds_scerevisiae)"},{"path":"/reference/cds_scerevisiae.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Coding sequences (CDS) of S. cerevisiae — cds_scerevisiae","text":"DNAStringSet object CDS S. cerevisiae.","code":""},{"path":"/reference/cds_scerevisiae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coding sequences (CDS) of S. cerevisiae — cds_scerevisiae","text":"","code":"data(cds_scerevisiae)"},{"path":"/reference/classify_gene_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","title":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","text":"Classify duplicate gene pairs based modes duplication","code":""},{"path":"/reference/classify_gene_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","text":"","code":"classify_gene_pairs(   annotation = NULL,   blast_list = NULL,   scheme = \"standard\",   blast_inter = NULL,   intron_counts,   evalue = 1e-10,   anchors = 5,   max_gaps = 25,   proximal_max = 10,   collinearity_dir = NULL )"},{"path":"/reference/classify_gene_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","text":"annotation processed GRangesList CompressedGRangesList object returned syntenet::process_input(). blast_list list data frames containing BLAST tabular output intraspecies comparisons. list element corresponds BLAST output given species, names list elements must match names list elements annotation. BLASTp, DIAMOND simular programs must run processed sequence data returned process_input(). scheme Character indicating classification scheme use. One \"binary\", \"standard\", \"extended\", \"full\". See details information scheme means. Default: \"standard\". blast_inter (valid scheme == \"extended\" \"full\"). list data frames containing BLAST tabular output comparison target species outgroups. Names list elements must match names list elements annotation. BLASTp, DIAMOND simular programs must run processed sequence data returned process_input(). intron_counts (valid scheme == \"full\"). list 2-column data frames number introns per gene returned get_intron_counts(). Names list elements must match names annotation. evalue Numeric scalar indicating E-value threshold. Default: 1e-10. anchors Numeric indicating minimum required number genes call syntenic block, syntenet::infer_syntenet. Default: 5. max_gaps Numeric indicating number upstream downstream genes search anchors, syntenet::infer_syntenet. Default: 25. proximal_max Numeric scalar maximum distance (number genes) two genes consider proximal duplicates. Default: 10. collinearity_dir Character indicating path directory .collinearity files stored. NULL, files stored subdirectory tempdir(). Default: NULL.","code":""},{"path":"/reference/classify_gene_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","text":"list 3-column data frames duplicated gene pairs (columns 1 2), modes duplication (column 3).","code":""},{"path":"/reference/classify_gene_pairs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","text":"classification schemes increase complexity (number classes) order 'binary', 'standard', 'extended', 'full'. classification scheme \"binary\", duplicates classified one 'SD' (segmental duplications) 'SSD' (small-scale duplications). classification scheme \"standard\" (default), duplicates classified 'SD' (segmental duplication), 'TD' (tandem duplication), 'PD' (proximal duplication), 'DD' (dispersed duplication). classification scheme \"extended\", duplicates classified 'SD' (segmental duplication), 'TD' (tandem duplication), 'PD' (proximal duplication), 'TRD' (transposon-derived duplication), 'DD' (dispersed duplication). Finally, classification scheme \"full\", duplicates classified 'SD' (segmental duplication), 'TD' (tandem duplication), 'PD' (proximal duplication), 'rTRD' (retrotransposon-derived duplication), 'dTRD' (DNA transposon-derived duplication), 'DD' (dispersed duplication).","code":""},{"path":"/reference/classify_gene_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","text":"","code":"# Load example data data(diamond_intra) data(diamond_inter) data(yeast_annot) data(yeast_seq)  # Get processed annotation data annotation <- syntenet::process_input(yeast_seq, yeast_annot)$annotation  # Get list of intron counts txdb_list <- lapply(yeast_annot, GenomicFeatures::makeTxDbFromGRanges) intron_counts <- lapply(txdb_list, get_intron_counts)  # Classify duplicates - full scheme dup_class <- classify_gene_pairs(     annotation = annotation,      blast_list = diamond_intra,      scheme = \"full\",     blast_inter = diamond_inter,      intron_counts = intron_counts )  # Check number of gene pairs per class table(dup_class$Scerevisiae$type) #>  #>   SD   TD   PD rTRD dTRD   DD  #>  342   42   80   52  963 2109"},{"path":"/reference/classify_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify genes into unique modes of duplication — classify_genes","title":"Classify genes into unique modes of duplication — classify_genes","text":"Classify genes unique modes duplication","code":""},{"path":"/reference/classify_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify genes into unique modes of duplication — classify_genes","text":"","code":"classify_genes(gene_pairs_list = NULL)"},{"path":"/reference/classify_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify genes into unique modes of duplication — classify_genes","text":"gene_pairs_list List classified gene pairs returned classify_gene_pairs().","code":""},{"path":"/reference/classify_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify genes into unique modes of duplication — classify_genes","text":"list 2-column data frames variables gene type representing gene ID duplication type, respectively.","code":""},{"path":"/reference/classify_genes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify genes into unique modes of duplication — classify_genes","text":"gene present pairs different duplication modes, gene classified unique mode duplication following order priority indicated levels factor type. scheme \"binary\", order SD > SSD. scheme \"standard\", order SD > TD > PD > DD. scheme \"extended\", order SD > TD > PD > TRD > DD. scheme \"full\", order SD > TD > PD > rTRD > dTRD > DD.","code":""},{"path":"/reference/classify_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify genes into unique modes of duplication — classify_genes","text":"","code":"data(fungi_kaks) scerevisiae_kaks <- fungi_kaks$saccharomyces_cerevisiae  cols <- c(\"dup1\", \"dup2\", \"type\") gene_pairs_list <- list(Scerevisiae = scerevisiae_kaks[, cols])  class_genes <- classify_genes(gene_pairs_list)"},{"path":"/reference/diamond_inter.html","id":null,"dir":"Reference","previous_headings":"","what":"Interspecies DIAMOND output for yeast species — diamond_inter","title":"Interspecies DIAMOND output for yeast species — diamond_inter","text":"list contains similarity search S. cerevisiae C. glabrata, obtained run_diamond().","code":""},{"path":"/reference/diamond_inter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interspecies DIAMOND output for yeast species — diamond_inter","text":"","code":"data(diamond_inter)"},{"path":"/reference/diamond_inter.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Interspecies DIAMOND output for yeast species — diamond_inter","text":"list data frames (length 1) containing output DIAMOND search S. cerevisiae C. glabrata (outgroup).","code":""},{"path":"/reference/diamond_inter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interspecies DIAMOND output for yeast species — diamond_inter","text":"","code":"data(diamond_inter)"},{"path":"/reference/diamond_intra.html","id":null,"dir":"Reference","previous_headings":"","what":"Intraspecies DIAMOND output for S. cerevisiae — diamond_intra","title":"Intraspecies DIAMOND output for S. cerevisiae — diamond_intra","text":"List obtained run_diamond().","code":""},{"path":"/reference/diamond_intra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intraspecies DIAMOND output for S. cerevisiae — diamond_intra","text":"","code":"data(diamond_intra)"},{"path":"/reference/diamond_intra.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Intraspecies DIAMOND output for S. cerevisiae — diamond_intra","text":"list data frames (length 1) containing whole paranome S. cerevisiae resulting intragenome similarity searches.","code":""},{"path":"/reference/diamond_intra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intraspecies DIAMOND output for S. cerevisiae — diamond_intra","text":"","code":"data(diamond_intra)"},{"path":"/reference/duplicates2counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a duplicate count matrix for each genome — duplicates2counts","title":"Get a duplicate count matrix for each genome — duplicates2counts","text":"Get duplicate count matrix genome","code":""},{"path":"/reference/duplicates2counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a duplicate count matrix for each genome — duplicates2counts","text":"","code":"duplicates2counts(duplicate_list, shape = \"long\")"},{"path":"/reference/duplicates2counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a duplicate count matrix for each genome — duplicates2counts","text":"duplicate_list list data frames duplicated genes gene pairs modes duplication returned classify_gene_pairs() classify_genes(). shape Character specifying shape output data frame. One \"long\" (data frame long shape, tidyverse sense), \"wide\" (data frame wide shape, tidyverse sense). Default: \"long\".","code":""},{"path":"/reference/duplicates2counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a duplicate count matrix for each genome — duplicates2counts","text":"shape = \"wide\", count matrix containing frequency duplicated genes (gene pairs) mode species, species rows duplication modes columns. shape = \"long\", data frame long format following variables: type Factor, type duplication. n Numeric, number duplicates. species Character, species name","code":""},{"path":"/reference/duplicates2counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a duplicate count matrix for each genome — duplicates2counts","text":"","code":"data(fungi_kaks)  # Get unique duplicates duplicate_list <- classify_genes(fungi_kaks)  # Get count table counts <- duplicates2counts(duplicate_list)"},{"path":"/reference/find_ks_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Find peaks in a Ks distribution with Gaussian Mixture Models — find_ks_peaks","title":"Find peaks in a Ks distribution with Gaussian Mixture Models — find_ks_peaks","text":"Find peaks Ks distribution Gaussian Mixture Models","code":""},{"path":"/reference/find_ks_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find peaks in a Ks distribution with Gaussian Mixture Models — find_ks_peaks","text":"","code":"find_ks_peaks(ks, npeaks = 2, min_ks = 0.01, max_ks = 4, verbose = FALSE)"},{"path":"/reference/find_ks_peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find peaks in a Ks distribution with Gaussian Mixture Models — find_ks_peaks","text":"ks numeric vector Ks values. npeaks Numeric scalar indicating number peaks Ks distribution. know many peaks , can include range values, number peaks produces lowest BIC (Bayesian Information Criterion) selected optimal. Default: 2. min_ks Numeric scalar minimum Ks value. Removing small Ks values generally used avoid incorporation allelic /splice variants prevent fitting component infinity. Default: 0.01. max_ks Numeric scalar indicating maximum Ks value. Removing large Ks values usually performed account Ks saturation. Default: 4. verbose Logical indicating messages printed screen. Default: FALSE.","code":""},{"path":"/reference/find_ks_peaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find peaks in a Ks distribution with Gaussian Mixture Models — find_ks_peaks","text":"list following elements: mean Numeric estimated means. sd Numeric estimated standard deviations. lambda Numeric estimated mixture weights. ks Numeric vector filtered Ks distribution based arguments passed min_ks max_ks.","code":""},{"path":"/reference/find_ks_peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find peaks in a Ks distribution with Gaussian Mixture Models — find_ks_peaks","text":"","code":"data(fungi_kaks) scerevisiae_kaks <- fungi_kaks$saccharomyces_cerevisiae ks <- scerevisiae_kaks$Ks  # Find 2 peaks in Ks distribution peaks <- find_ks_peaks(ks, npeaks = 2)  # From 2 to 4 peaks, verbose = TRUE to show BIC values peaks <- find_ks_peaks(ks, npeaks = c(2, 3, 4), verbose = TRUE) #> Optimal number of peaks: 4 #> Bayesian Information Criterion (BIC):  #>           E         V #> 2 -4833.369 -4312.906 #> 3 -4109.263 -3625.427 #> 4 -4124.051 -3397.111 #>  #> Top 3 models based on the BIC criterion:  #>       V,4       V,3       E,3  #> -3397.111 -3625.427 -4109.263"},{"path":"/reference/fungi_kaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Duplicate pairs and Ka, Ks, and Ka/Ks values for fungi species — fungi_kaks","title":"Duplicate pairs and Ka, Ks, and Ka/Ks values for fungi species — fungi_kaks","text":"data set obtained classify_gene_pairs() followed pairs2kaks().","code":""},{"path":"/reference/fungi_kaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duplicate pairs and Ka, Ks, and Ka/Ks values for fungi species — fungi_kaks","text":"","code":"data(fungi_kaks)"},{"path":"/reference/fungi_kaks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Duplicate pairs and Ka, Ks, and Ka/Ks values for fungi species — fungi_kaks","text":"list data frame elements named saccharomyces_cerevisiae, candida_glabrata, schizosaccharomyces_pombe. data frame contains following variables: dup1 Character, duplicated gene 1. dup2 Character, duplicated gene 2. Ka Numeric, Ka values. Ks Numeric, Ks values. Ka_Ks Numeric, Ka/Ks values. type Character, mode duplication","code":""},{"path":"/reference/fungi_kaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Duplicate pairs and Ka, Ks, and Ka/Ks values for fungi species — fungi_kaks","text":"","code":"data(fungi_kaks)"},{"path":"/reference/get_anchors_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a list of anchor pairs for each species — get_anchors_list","title":"Get a list of anchor pairs for each species — get_anchors_list","text":"Get list anchor pairs species","code":""},{"path":"/reference/get_anchors_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a list of anchor pairs for each species — get_anchors_list","text":"","code":"get_anchors_list(   blast_list = NULL,   annotation = NULL,   evalue = 1e-10,   anchors = 5,   max_gaps = 25,   collinearity_dir = NULL )"},{"path":"/reference/get_anchors_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a list of anchor pairs for each species — get_anchors_list","text":"blast_list list data frames containing BLAST tabular output intraspecies comparisons. list element corresponds BLAST output given species, names list elements must match names list elements annotation. BLASTp, DIAMOND simular programs must run processed sequence data returned process_input(). annotation processed GRangesList CompressedGRangesList object returned syntenet::process_input(). evalue Numeric scalar indicating E-value threshold. Default: 1e-10. anchors Numeric indicating minimum required number genes call syntenic block, syntenet::infer_syntenet. Default: 5. max_gaps Numeric indicating number upstream downstream genes search anchors, syntenet::infer_syntenet. Default: 25. collinearity_dir Character indicating path directory .collinearity files stored. NULL, files stored subdirectory tempdir(). Default: NULL.","code":""},{"path":"/reference/get_anchors_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a list of anchor pairs for each species — get_anchors_list","text":"list data frames representing intraspecies anchor pairs.","code":""},{"path":"/reference/get_anchors_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a list of anchor pairs for each species — get_anchors_list","text":"","code":"data(diamond_intra) data(yeast_annot) data(yeast_seq) blast_list <- diamond_intra  # Get processed annotation for S. cerevisiae annotation <- syntenet::process_input(yeast_seq, yeast_annot)$annotation  # Get list of intraspecies anchor pairs anchorpairs <- get_anchors_list(blast_list, annotation)"},{"path":"/reference/get_intron_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a data frame of intron counts per gene — get_intron_counts","title":"Get a data frame of intron counts per gene — get_intron_counts","text":"Get data frame intron counts per gene","code":""},{"path":"/reference/get_intron_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a data frame of intron counts per gene — get_intron_counts","text":"","code":"get_intron_counts(txdb)"},{"path":"/reference/get_intron_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a data frame of intron counts per gene — get_intron_counts","text":"txdb txdb object transcript annotations. See details examples create txdb objects different kinds input.","code":""},{"path":"/reference/get_intron_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a data frame of intron counts per gene — get_intron_counts","text":"data frame intron counts per gene, variables: gene Character gene IDs. introns Numeric number introns per gene.","code":""},{"path":"/reference/get_intron_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a data frame of intron counts per gene — get_intron_counts","text":"family functions makeTxDbFrom* GenomicFeatures package can used create txdb objects variety input data types. can create txdb objects e.g., GRanges objects (makeTxDbFromGRanges()), GFF files (makeTxDbFromGFF()), Ensembl database (makeTxDbFromEnsembl), Biomart database (makeTxDbFromBiomart).","code":""},{"path":"/reference/get_intron_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a data frame of intron counts per gene — get_intron_counts","text":"","code":"data(yeast_annot)  # Create txdb object from GRanges txdb <- GenomicFeatures::makeTxDbFromGRanges(yeast_annot[[1]])  # Get intron counts intron_counts <- get_intron_counts(txdb)"},{"path":"/reference/get_segmental.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify gene pairs derived from segmental duplications — get_segmental","title":"Classify gene pairs derived from segmental duplications — get_segmental","text":"Classify gene pairs derived segmental duplications","code":""},{"path":"/reference/get_segmental.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify gene pairs derived from segmental duplications — get_segmental","text":"","code":"get_segmental(anchor_pairs = NULL, pairs = NULL)"},{"path":"/reference/get_segmental.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify gene pairs derived from segmental duplications — get_segmental","text":"anchor_pairs 2-column data frame anchor pairs columns 1 2. pairs 2-column data frame duplicate pairs. equivalent first 2 columns tabular output BLAST-like programs.","code":""},{"path":"/reference/get_segmental.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify gene pairs derived from segmental duplications — get_segmental","text":"3-column data frame variables: dup1 Character, duplicated gene 1 dup2 Character, duplicated gene 2 type Factor indicating duplication types, levels \"SD\" (segmental duplication) \"DD\" (dispersed duplication).","code":""},{"path":"/reference/get_segmental.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify gene pairs derived from segmental duplications — get_segmental","text":"","code":"data(diamond_intra) data(yeast_annot) data(yeast_seq) blast_list <- diamond_intra  # Get processed annotation for S. cerevisiae annotation <- syntenet::process_input(yeast_seq, yeast_annot)$annotation[1]  # Get list of intraspecies anchor pairs anchor_pairs <- get_anchors_list(blast_list, annotation) anchor_pairs <- anchor_pairs[[1]][, c(1, 2)]  # Get duplicate pairs from DIAMOND output duplicates <- diamond_intra[[1]][, c(1, 2)] dups <- get_segmental(anchor_pairs, duplicates)"},{"path":"/reference/get_tandem_proximal.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify gene pairs derived from tandem and proximal duplications — get_tandem_proximal","title":"Classify gene pairs derived from tandem and proximal duplications — get_tandem_proximal","text":"Classify gene pairs derived tandem proximal duplications","code":""},{"path":"/reference/get_tandem_proximal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify gene pairs derived from tandem and proximal duplications — get_tandem_proximal","text":"","code":"get_tandem_proximal(pairs = NULL, annotation_granges = NULL, proximal_max = 10)"},{"path":"/reference/get_tandem_proximal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify gene pairs derived from tandem and proximal duplications — get_tandem_proximal","text":"pairs 3-column data frame columns dup1, dup2, type indicating duplicated gene 1, duplicated gene 2, mode duplication associated pair. data frame returned get_segmental(). annotation_granges processed GRanges object element list returned syntenet::process_input(). proximal_max Numeric scalar maximum distance (number genes) two genes consider proximal duplicates. Default: 10.","code":""},{"path":"/reference/get_tandem_proximal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify gene pairs derived from tandem and proximal duplications — get_tandem_proximal","text":"3-column data frame variables: dup1 Character, duplicated gene 1. dup2 Character, duplicated gene 2. type Factor duplication types, levels \"SD\" (segmental duplication), \"TD\" (tandem duplication), \"PD\" (proximal duplication), \"DD\" (dispersed duplication).","code":""},{"path":"/reference/get_tandem_proximal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify gene pairs derived from tandem and proximal duplications — get_tandem_proximal","text":"","code":"data(yeast_annot) data(yeast_seq) data(fungi_kaks) scerevisiae_kaks <- fungi_kaks$saccharomyces_cerevisiae  # Get processed annotation for S. cerevisiae pdata <- annotation <- syntenet::process_input(yeast_seq, yeast_annot) annot <- pdata$annotation[[1]]  # Get duplicated pairs pairs <- scerevisiae_kaks[, c(\"dup1\", \"dup2\", \"type\")] pairs$dup1 <- paste0(\"Sce_\", pairs$dup1) pairs$dup2 <- paste0(\"Sce_\", pairs$dup2)  # Get tandem and proximal duplicates td_pd_pairs <- get_tandem_proximal(pairs, annot)"},{"path":"/reference/get_transposed.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify gene pairs originating from transposon-derived duplications — get_transposed","title":"Classify gene pairs originating from transposon-derived duplications — get_transposed","text":"Classify gene pairs originating transposon-derived duplications","code":""},{"path":"/reference/get_transposed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify gene pairs originating from transposon-derived duplications — get_transposed","text":"","code":"get_transposed(   pairs,   blast_inter,   annotation,   evalue = 1e-10,   anchors = 5,   max_gaps = 25,   collinearity_dir = NULL )"},{"path":"/reference/get_transposed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify gene pairs originating from transposon-derived duplications — get_transposed","text":"pairs 3-column data frame columns dup1, dup2, type indicating duplicated gene 1, duplicated gene 2, mode duplication associated pair. data frame returned get_tandem_proximal(). blast_inter list data frames length 1 containing BLAST tabular output comparison target species outgroup. Names list elements must match names list elements annotation. BLASTp, DIAMOND simular programs must run processed sequence data returned syntenet::process_input(). annotation processed GRangesList CompressedGRangesList object returned syntenet::process_input(). evalue Numeric scalar indicating E-value threshold. Default: 1e-10. anchors Numeric indicating minimum required number genes call syntenic block, syntenet::infer_syntenet. Default: 5. max_gaps Numeric indicating number upstream downstream genes search anchors, syntenet::infer_syntenet. Default: 25. collinearity_dir Character indicating path directory .collinearity files stored. NULL, files stored subdirectory tempdir(). Default: NULL.","code":""},{"path":"/reference/get_transposed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify gene pairs originating from transposon-derived duplications — get_transposed","text":"3-column data frame following variables: dup1 Character, duplicated gene 1. dup2 Character, duplicated gene 2. type Factor duplication types, levels \"SD\" (segmental duplication), \"TD\" (tandem duplication), \"PD\" (proximal duplication), \"TRD\" (transposon-derived duplication), \"DD\" (dispersed duplication).","code":""},{"path":"/reference/get_transposed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify gene pairs originating from transposon-derived duplications — get_transposed","text":"","code":"data(diamond_inter) data(diamond_intra) data(yeast_seq) data(yeast_annot) data(fungi_kaks) scerevisiae_kaks <- fungi_kaks$saccharomyces_cerevisiae  # Get processed annotation pdata <- syntenet::process_input(yeast_seq, yeast_annot) annotation <- pdata$annotation  # Get duplicated pairs pairs <- scerevisiae_kaks[, c(\"dup1\", \"dup2\", \"type\")] pairs$dup1 <- paste0(\"Sce_\", pairs$dup1) pairs$dup2 <- paste0(\"Sce_\", pairs$dup2)  # Classify pairs trd <- get_transposed(pairs, diamond_inter, annotation)"},{"path":"/reference/get_transposed_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify TRD genes as derived from either DNA transposons or retrotransposons — get_transposed_classes","title":"Classify TRD genes as derived from either DNA transposons or retrotransposons — get_transposed_classes","text":"Classify TRD genes derived either DNA transposons retrotransposons","code":""},{"path":"/reference/get_transposed_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify TRD genes as derived from either DNA transposons or retrotransposons — get_transposed_classes","text":"","code":"get_transposed_classes(pairs, intron_counts)"},{"path":"/reference/get_transposed_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify TRD genes as derived from either DNA transposons or retrotransposons — get_transposed_classes","text":"pairs 3-column data frame columns dup1, dup2, type indicating duplicated gene 1, duplicated gene 2, mode duplication associated pair. data frame returned get_transposed(). intron_counts 2-column data frame columns gene introns indicating number introns gene, returned get_intron_counts.","code":""},{"path":"/reference/get_transposed_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify TRD genes as derived from either DNA transposons or retrotransposons — get_transposed_classes","text":"3-column data frame following variables: dup1 Character, duplicated gene 1. dup2 Character, duplicated gene 2. type Factor duplication types, levels \"SD\" (segmental duplication), \"TD\" (tandem duplication), \"PD\" (proximal duplication), \"dTRD\" (DNA transposon-derived duplication), \"rTRD\" (retrotransposon-derived duplication), \"DD\" (dispersed duplication).","code":""},{"path":"/reference/get_transposed_classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify TRD genes as derived from either DNA transposons or retrotransposons — get_transposed_classes","text":"","code":"data(diamond_inter) data(diamond_intra) data(yeast_seq) data(yeast_annot) data(fungi_kaks) scerevisiae_kaks <- fungi_kaks$saccharomyces_cerevisiae  # Get processed annotation pdata <- syntenet::process_input(yeast_seq, yeast_annot) annotation <- pdata$annotation  # Get duplicated pairs pairs <- scerevisiae_kaks[, c(\"dup1\", \"dup2\", \"type\")] pairs$dup1 <- paste0(\"Sce_\", pairs$dup1) pairs$dup2 <- paste0(\"Sce_\", pairs$dup2)  # Classify pairs trd <- get_transposed(pairs, diamond_inter, annotation)  # Create txdb object from GRanges txdb <- GenomicFeatures::makeTxDbFromGRanges(yeast_annot[[1]])  # Get intron counts intron_counts <- get_intron_counts(txdb)  # Get TRD classes trd_classes <- get_transposed_classes(trd, intron_counts)"},{"path":"/reference/gmax_ks.html","id":null,"dir":"Reference","previous_headings":"","what":"Duplicate pairs and Ks values for Glycine max — gmax_ks","title":"Duplicate pairs and Ks values for Glycine max — gmax_ks","text":"data set obtained classify_gene_pairs() followed pairs2kaks().","code":""},{"path":"/reference/gmax_ks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duplicate pairs and Ks values for Glycine max — gmax_ks","text":"","code":"data(gmax_ks)"},{"path":"/reference/gmax_ks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Duplicate pairs and Ks values for Glycine max — gmax_ks","text":"data frame following variables: dup1 Character, duplicated gene 1. dup2 Character, duplicated gene 2. Ks Numeric, Ks values.","code":""},{"path":"/reference/gmax_ks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Duplicate pairs and Ks values for Glycine max — gmax_ks","text":"","code":"data(gmax_ks)"},{"path":"/reference/pairs2kaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Ka, Ks, and Ka/Ks from duplicate gene pairs — pairs2kaks","title":"Calculate Ka, Ks, and Ka/Ks from duplicate gene pairs — pairs2kaks","text":"Calculate Ka, Ks, Ka/Ks duplicate gene pairs","code":""},{"path":"/reference/pairs2kaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Ka, Ks, and Ka/Ks from duplicate gene pairs — pairs2kaks","text":"","code":"pairs2kaks(   gene_pairs_list,   cds,   model = \"MYN\",   bp_param = BiocParallel::SerialParam() )"},{"path":"/reference/pairs2kaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Ka, Ks, and Ka/Ks from duplicate gene pairs — pairs2kaks","text":"gene_pairs_list List data frames containing duplicated gene pairs returned classify_gene_pairs(). cds List DNAStringSet objects containing coding sequences gene. model Character scalar indicating codon model use. Possible values \"Li\", \"NG86\", \"NG\", \"LWL\", \"LPB\", \"MLWL\", \"MLPB\", \"GY\", \"YN\", \"MYN\", \"MS\", \"MA\", \"GNG\", \"GLWL\", \"GLPB\", \"GMLWL\", \"GMLPB\", \"GYN\", \"GMYN\". Default: \"MYN\". bp_param BiocParallel back-end used. Default: BiocParallel::SerialParam().","code":""},{"path":"/reference/pairs2kaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Ka, Ks, and Ka/Ks from duplicate gene pairs — pairs2kaks","text":"list data frames containing gene pairs Ka, Ks, Ka/Ks values.","code":""},{"path":"/reference/pairs2kaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Ka, Ks, and Ka/Ks from duplicate gene pairs — pairs2kaks","text":"","code":"data(diamond_intra) data(diamond_inter) data(yeast_annot) data(yeast_seq) data(cds_scerevisiae) blast_list <- diamond_intra blast_inter <- diamond_inter  pdata <- syntenet::process_input(yeast_seq, yeast_annot) annot <- pdata$annotation[\"Scerevisiae\"]  # Binary classification scheme pairs <- classify_gene_pairs(annot, blast_list) td_pairs <- pairs[[1]][pairs[[1]]$type == \"TD\", ] gene_pairs_list <- list(     Scerevisiae = td_pairs[seq(1, 3, by = 1), ] )  cds <- list(Scerevisiae = cds_scerevisiae)  kaks <- pairs2kaks(gene_pairs_list, cds)"},{"path":"/reference/plot_duplicate_freqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot frequency of duplicates per mode for each species — plot_duplicate_freqs","title":"Plot frequency of duplicates per mode for each species — plot_duplicate_freqs","text":"Plot frequency duplicates per mode species","code":""},{"path":"/reference/plot_duplicate_freqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot frequency of duplicates per mode for each species — plot_duplicate_freqs","text":"","code":"plot_duplicate_freqs(dup_counts, plot_type = \"facet\", remove_zero = TRUE)"},{"path":"/reference/plot_duplicate_freqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot frequency of duplicates per mode for each species — plot_duplicate_freqs","text":"dup_counts data frame long format number duplicates per mode species, returned function duplicates2counts. plot_type Character indicating plot frequencies. One 'facet' (facets level variable type), 'stack' (levels variable type stacked bars), 'stack_percent' (levels variable type stacked bars, x-axis representing relative frequencies). Default: 'facet'. remove_zero Logical indicating whether remove rows zero values. Default: TRUE.","code":""},{"path":"/reference/plot_duplicate_freqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot frequency of duplicates per mode for each species — plot_duplicate_freqs","text":"ggplot object.","code":""},{"path":"/reference/plot_duplicate_freqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot frequency of duplicates per mode for each species — plot_duplicate_freqs","text":"","code":"data(fungi_kaks)  # Get unique duplicates duplicate_list <- classify_genes(fungi_kaks)  # Get count table dup_counts <- duplicates2counts(duplicate_list)  # Plot counts plot_duplicate_freqs(dup_counts, plot_type = \"stack_percent\")"},{"path":"/reference/plot_ks_distro.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distribution of synonymous substitution rates (Ks) — plot_ks_distro","title":"Plot distribution of synonymous substitution rates (Ks) — plot_ks_distro","text":"Plot distribution synonymous substitution rates (Ks)","code":""},{"path":"/reference/plot_ks_distro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distribution of synonymous substitution rates (Ks) — plot_ks_distro","text":"","code":"plot_ks_distro(   ks_df,   min_ks = 0.01,   max_ks = 2,   bytype = FALSE,   type_levels = NULL,   plot_type = \"histogram\",   binwidth = 0.03 )"},{"path":"/reference/plot_ks_distro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of synonymous substitution rates (Ks) — plot_ks_distro","text":"ks_df data frame Ks values gene pair returned pairs2kaks(). min_ks Numeric indicating minimum Ks value keep. Default: 0.01. max_ks Numeric indicating maximum Ks value keep. Default: 2. bytype Logical indicating whether plot distribution type duplication (requires column named type). type_levels (valid bytype NULL) Character indicating levels variable specified parameter group_by kept. default, levels kept. plot_type Character indicating type plot create. bytype = TRUE, possible types \"histogram\" \"violin\". bytype = FALSE, possible types \"histogram\", \"density\", \"density_histogram\". Default: \"histogram\". binwidth (valid plot_type = \"histogram\") Numeric indicating bin width. Default: 0.03.","code":""},{"path":"/reference/plot_ks_distro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distribution of synonymous substitution rates (Ks) — plot_ks_distro","text":"ggplot object.","code":""},{"path":"/reference/plot_ks_distro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot distribution of synonymous substitution rates (Ks) — plot_ks_distro","text":"","code":"data(fungi_kaks) ks_df <- fungi_kaks$saccharomyces_cerevisiae  # Plot distro plot_ks_distro(ks_df, bytype = TRUE)"},{"path":"/reference/plot_ks_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot histogram of Ks distribution with peaks — plot_ks_peaks","title":"Plot histogram of Ks distribution with peaks — plot_ks_peaks","text":"Plot histogram Ks distribution peaks","code":""},{"path":"/reference/plot_ks_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot histogram of Ks distribution with peaks — plot_ks_peaks","text":"","code":"plot_ks_peaks(peaks = NULL, binwidth = 0.05)"},{"path":"/reference/plot_ks_peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot histogram of Ks distribution with peaks — plot_ks_peaks","text":"peaks list elements mean, sd, lambda, ks, returned function fins_ks_peaks(). binwidth Numeric scalar binwidth histogram. Default: 0.05.","code":""},{"path":"/reference/plot_ks_peaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot histogram of Ks distribution with peaks — plot_ks_peaks","text":"ggplot object histogram lines Ks peak.","code":""},{"path":"/reference/plot_ks_peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot histogram of Ks distribution with peaks — plot_ks_peaks","text":"","code":"data(fungi_kaks) scerevisiae_kaks <- fungi_kaks$saccharomyces_cerevisiae ks <- scerevisiae_kaks$Ks  # Find 2 peaks in Ks distribution peaks <- find_ks_peaks(ks, npeaks = 2)  # Plot plot_ks_peaks(peaks, binwidth = 0.05)"},{"path":"/reference/plot_rates_by_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distributions of substitution rates (Ka, Ks, or Ka/Ks) per species — plot_rates_by_species","title":"Plot distributions of substitution rates (Ka, Ks, or Ka/Ks) per species — plot_rates_by_species","text":"Plot distributions substitution rates (Ka, Ks, Ka/Ks) per species","code":""},{"path":"/reference/plot_rates_by_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distributions of substitution rates (Ka, Ks, or Ka/Ks) per species — plot_rates_by_species","text":"","code":"plot_rates_by_species(   kaks_list,   rate_column = \"Ks\",   bytype = FALSE,   range = c(0, 2),   fill = \"deepskyblue3\",   color = \"deepskyblue4\" )"},{"path":"/reference/plot_rates_by_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distributions of substitution rates (Ka, Ks, or Ka/Ks) per species — plot_rates_by_species","text":"kaks_list list data frames substitution rates per gene pair species returned pairs2kaks(). rate_column Character indicating name column plot. Default: \"Ks\". bytype Logical indicating whether show distributions type duplication. Default: FALSE. range Numeric vector length 2 indicating minimum maximum values plot. Default: c(0, 2). fill Character color use fill aesthetic. Ignored bytype = TRUE. Default: \"deepskyblue3\". color Character color use color aesthetic. Ignored bytype = FALSE. Default: \"deepskyblue4\".","code":""},{"path":"/reference/plot_rates_by_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distributions of substitution rates (Ka, Ks, or Ka/Ks) per species — plot_rates_by_species","text":"ggplot object.","code":""},{"path":"/reference/plot_rates_by_species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot distributions of substitution rates (Ka, Ks, or Ka/Ks) per species — plot_rates_by_species","text":"Data plotted using species order list. change order species plot, reorder list elements kaks_list.","code":""},{"path":"/reference/plot_rates_by_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot distributions of substitution rates (Ka, Ks, or Ka/Ks) per species — plot_rates_by_species","text":"","code":"data(fungi_kaks)  # Plot rates plot_rates_by_species(fungi_kaks, rate_column = \"Ka_Ks\")"},{"path":"/reference/split_pairs_by_peak.html","id":null,"dir":"Reference","previous_headings":"","what":"Split gene pairs based on their Ks peaks — split_pairs_by_peak","title":"Split gene pairs based on their Ks peaks — split_pairs_by_peak","text":"purpose function classify gene pairs age 2+ Ks peaks. way, newer gene pairs found within certain number standard deviations highest peak, older genes found close within smaller peaks.","code":""},{"path":"/reference/split_pairs_by_peak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split gene pairs based on their Ks peaks — split_pairs_by_peak","text":"","code":"split_pairs_by_peak(ks_df, peaks, nsd = 2, binwidth = 0.05)"},{"path":"/reference/split_pairs_by_peak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split gene pairs based on their Ks peaks — split_pairs_by_peak","text":"ks_df 3-column data frame gene pairs columns 1 2, Ks values gene pair column 3. peaks list mean, standard deviation, amplitude Ks peaks generated find_ks_peaks. nsd Numeric number standard deviations consider peak. binwidth Numeric scalar binwidth histogram. Default: 0.05.","code":""},{"path":"/reference/split_pairs_by_peak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split gene pairs based on their Ks peaks — split_pairs_by_peak","text":"list following elements: pairs 4-column data frame variables dup1 (character), dup2 (character), ks (numeric), peak (numeric), representing duplicate gene pair, Ks values, peak ID, respectively. plot ggplot object Ks peaks returned plot_ks_peaks, dashed red lines indicating boundaries peak.","code":""},{"path":"/reference/split_pairs_by_peak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split gene pairs based on their Ks peaks — split_pairs_by_peak","text":"","code":"data(fungi_kaks) scerevisiae_kaks <- fungi_kaks$saccharomyces_cerevisiae  # Create a data frame of duplicate pairs and Ks values ks_df <- scerevisiae_kaks[, c(\"dup1\", \"dup2\", \"Ks\")]  # Create list of peaks peaks <- find_ks_peaks(ks_df$Ks, npeaks = 2)  # Split pairs spairs <- split_pairs_by_peak(ks_df, peaks)"},{"path":"/reference/yeast_annot.html","id":null,"dir":"Reference","previous_headings":"","what":"Genome annotation of the yeast species S. cerevisiae and C. glabrata — yeast_annot","title":"Genome annotation of the yeast species S. cerevisiae and C. glabrata — yeast_annot","text":"Data obtained Ensembl Fungi. annotation data protein-coding genes (associated mRNA, exons, CDS, etc) included.","code":""},{"path":"/reference/yeast_annot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genome annotation of the yeast species S. cerevisiae and C. glabrata — yeast_annot","text":"","code":"data(yeast_annot)"},{"path":"/reference/yeast_annot.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Genome annotation of the yeast species S. cerevisiae and C. glabrata — yeast_annot","text":"CompressedGRangesList containing elements Scerevisiae Cglabrata.","code":""},{"path":"/reference/yeast_annot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genome annotation of the yeast species S. cerevisiae and C. glabrata — yeast_annot","text":"","code":"data(yeast_annot)"},{"path":"/reference/yeast_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Protein sequences of the yeast species S. cerevisiae and C. glabrata — yeast_seq","title":"Protein sequences of the yeast species S. cerevisiae and C. glabrata — yeast_seq","text":"Data obtained Ensembl Fungi. translated sequences primary transcripts included.","code":""},{"path":"/reference/yeast_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Protein sequences of the yeast species S. cerevisiae and C. glabrata — yeast_seq","text":"","code":"data(yeast_seq)"},{"path":"/reference/yeast_seq.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Protein sequences of the yeast species S. cerevisiae and C. glabrata — yeast_seq","text":"list AAStringSet objects elements Scerevisiae Cglabrata.","code":""},{"path":"/reference/yeast_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Protein sequences of the yeast species S. cerevisiae and C. glabrata — yeast_seq","text":"","code":"data(yeast_seq)"},{"path":"/news/index.html","id":"doubletrouble-0990","dir":"Changelog","previous_headings":"","what":"doubletrouble 0.99.0","title":"doubletrouble 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package.","code":""},{"path":"/news/index.html","id":"doubletrouble-0992","dir":"Changelog","previous_headings":"","what":"doubletrouble 0.99.2","title":"doubletrouble 0.99.2","text":"CHANGES Small change coding style Bioconductor peer-review (m:n replaced c(m, n) seq(m,n))","code":""},{"path":"/news/index.html","id":"doubletrouble-0993","dir":"Changelog","previous_headings":"","what":"doubletrouble 0.99.3","title":"doubletrouble 0.99.3","text":"BUG FIXES Updated functions (e.g., get_anchor_list(), collinearity2blocks()) update syntenet.","code":""}]
