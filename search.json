[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to doubletrouble","title":"Contributing to doubletrouble","text":"outlines propose change doubletrouble. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to doubletrouble","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to doubletrouble","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to doubletrouble","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"almeidasilvaf/doubletrouble\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to doubletrouble","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to doubletrouble","text":"Please note doubletrouble project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with doubletrouble","title":"Getting help with doubletrouble","text":"Thanks using doubletrouble! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with doubletrouble","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with doubletrouble","text":"Armed reprex, next step figure ask. See also Bioconductor help website. ’s question: start community.rstudio.com, /StackOverflow. Bioconductor-related question, please ask Bioconductor Support Website using appropriate package tag (website send automatic email package authors). people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with doubletrouble","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"/articles/doubletrouble_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Identification and classification of duplicated genes","text":"Gene genome duplications source raw genetic material evolution (Ohno 2013). However, whole-genome duplications (WGD) small-scale duplications (SSD) contribute genome evolution different manners. help explore different contributions WGD SSD evolution, developed doubletrouble, package can used identify classify duplicated genes whole-genome protein sequences, calculate substitution rates per substitution site (.e., Ka Ks) gene pairs, find peaks Ks distributions, classify gene pairs age groups.","code":""},{"path":"/articles/doubletrouble_vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Identification and classification of duplicated genes","text":"can install doubletrouble Bioconductor following code: , can load package:","code":"if(!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"doubletrouble\")  ## Check that you have a valid Bioconductor installation BiocManager::valid() library(doubletrouble)"},{"path":"/articles/doubletrouble_vignette.html","id":"data-description","dir":"Articles","previous_headings":"","what":"Data description","title":"Identification and classification of duplicated genes","text":"vignette, use protein sequences (primary transcripts ) genome annotation yeast species Saccharomyces cerevisiae Candida glabrata. Data obtained Ensembl Fungi release 54 (Yates et al. 2022). example data sets stored following objects: yeast_seq: list AAStringSet objects elements named Scerevisiae Cglabrata. yeast_annot: GRangesList object elements named Scerevisiae Cglabrata. goal identify classify duplicated genes S. cerevisiae genome. C. glabrata genome used outgroup identify transposed duplicates later vignette.","code":"# Load list of DIAMOND tabular output data(yeast_seq) head(yeast_seq) # Load annotation list processed with syntenet::process_input() data(yeast_annot) head(yeast_annot)"},{"path":"/articles/doubletrouble_vignette.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data preparation","title":"Identification and classification of duplicated genes","text":"First , need process list protein sequences gene ranges detect synteny syntenet. using function process_input() syntenet package. processed data represented list elements seq annotation, containing protein sequences gene ranges species, respectively. Finally, need perform pairwise sequence similarity searches identify whole set paralogous gene pairs. can using function run_diamond() syntenet package 1, setting compare = \"intraspecies\" perform intraspecies comparisons. voilà! Now DIAMOND output processed annotation, can classify duplicated genes.","code":"library(syntenet)  # Process input data pdata <- process_input(yeast_seq, yeast_annot)  # Inspect the output names(pdata) pdata$seq pdata$annotation data(diamond_intra)  # Run DIAMOND in sensitive mode for S. cerevisiae only if(diamond_is_installed()) {     diamond_intra <- run_diamond(         seq = pdata$seq[\"Scerevisiae\"],         compare = \"intraspecies\",          outdir = file.path(tempdir(), \"diamond_intra\"),         ... = \"--sensitive\"     ) }  # Inspect output names(diamond_intra) head(diamond_intra$Scerevisiae_Scerevisiae)"},{"path":"/articles/doubletrouble_vignette.html","id":"classifying-duplicated-gene-pairs-and-genes","dir":"Articles","previous_headings":"","what":"Classifying duplicated gene pairs and genes","title":"Identification and classification of duplicated genes","text":"classify duplicated gene pairs based modes duplication, use function classify_gene_pairs(). input, need pass: processed annotation list returned syntenet::process_input(); list data frames DIAMOND (BLASTp, etc.) tabular output returned syntenet::run_diamond(). function classify_gene_pairs incorporates 3 classification schemes: Binary: Duplicated gene pairs classified either derived whole-genome duplications (WGD) small-scale duplications (SSD). Expanded: SSD-derived genes divided 3 subcategories: tandem duplication (TD), proximal duplication (PD), dispersed duplication (DD). Full: Similar expanded scheme, additional subcategory used SSD-derived gene pairs: transposed duplication (TRD). 2","code":""},{"path":"/articles/doubletrouble_vignette.html","id":"binary-classification","dir":"Articles","previous_headings":"Classifying duplicated gene pairs and genes","what":"Binary classification","title":"Identification and classification of duplicated genes","text":"classify duplicated gene pairs WGD- SSD-derived, use binary = TRUE classify_gene_pairs(). function returns list data frames, containing duplicated gene pairs modes duplication species.","code":"# Binary classification c_binary <- classify_gene_pairs(     blast_list = diamond_intra,     annotation = pdata$annotation,     binary = TRUE )  # Inspecting the output names(c_binary) head(c_binary$Scerevisiae)  # How many pairs are there for each duplication mode? table(c_binary$Scerevisiae$type)"},{"path":"/articles/doubletrouble_vignette.html","id":"expanded-classification-ssd-td-pd-dd","dir":"Articles","previous_headings":"Classifying duplicated gene pairs and genes","what":"Expanded classification (SSD → TD, PD, DD)","title":"Identification and classification of duplicated genes","text":"subdivide SSD-derived gene pairs TD-, PD-, DD-derived, use binary = FALSE classify_gene_pairs().","code":"# Expanded classification c_expanded <- classify_gene_pairs(     blast_list = diamond_intra,     annotation = pdata$annotation,     binary = FALSE )  # Inspecting the output names(c_expanded) head(c_expanded$Scerevisiae)  # How many pairs are there for each duplication mode? table(c_expanded$Scerevisiae$type)"},{"path":"/articles/doubletrouble_vignette.html","id":"full","dir":"Articles","previous_headings":"Classifying duplicated gene pairs and genes","what":"Full classification (SSD → TD, PD, TRD, DD)","title":"Identification and classification of duplicated genes","text":"find transposon-derived duplicates, first need perform similarity search target species outgroup species. can syntenet::run_diamond(). parameter compare, pass 2-column data frame specifying comparisons made. 3 , identify duplicated gene pairs Saccharomyces cerevisiae using Candida glabrata outgroup. Now, pass interspecies DIAMOND output argument parameter blast_inter classify_gene_pairs().","code":"data(diamond_inter) # load pre-computed output in case DIAMOND is not installed  # Create data frame of comparisons to be made comparisons <- data.frame(     species = \"Scerevisiae\",     outgroup = \"Cglabrata\" ) comparisons  # Run DIAMOND for the comparison we specified if(diamond_is_installed()) {     diamond_inter <- run_diamond(         seq = pdata$seq,         compare = comparisons,         outdir = file.path(tempdir(), \"diamond_inter\"),         ... = \"--sensitive\"     ) }  names(diamond_inter) head(diamond_inter$Scerevisiae_Cglabrata) # Full classification c_full <- classify_gene_pairs(     blast_list = diamond_intra,     annotation = pdata$annotation,     binary = FALSE,     blast_inter = diamond_inter )  # Inspecting the output names(c_full) head(c_full$Scerevisiae)  # How many pairs are there for each duplication mode? table(c_full$Scerevisiae$type)"},{"path":"/articles/doubletrouble_vignette.html","id":"classifying-genes-into-unique-modes-of-duplication","dir":"Articles","previous_headings":"","what":"Classifying genes into unique modes of duplication","title":"Identification and classification of duplicated genes","text":"look carefully output classify_gene_pairs(), notice genes appear one duplicate pair, pairs can different duplication modes assigned. ’s nothing wrong . Consider, example, gene originated whole-genome duplication event 60 million years ago, underwent tandem duplication 5 million years ago. output classify_gene_pairs(), ’d see gene two pairs, one WGD type column, one TD. want assign gene unique mode duplication, can use function classify_genes(). function assigns duplication modes hierarchically level priority: WGD > TD > PD > TRD > DD. input classify_genes() list gene pairs returned classify_gene_pairs().","code":"# Classify genes into unique modes of duplication c_genes <- classify_genes(c_full)  # Inspecting the output names(c_genes) head(c_genes$Scerevisiae)  # Number of genes per mode table(c_genes$Scerevisiae$type)"},{"path":"/articles/doubletrouble_vignette.html","id":"calculating-ka-ks-and-kaks-for-duplicated-gene-pairs","dir":"Articles","previous_headings":"","what":"Calculating Ka, Ks, and Ka/Ks for duplicated gene pairs","title":"Identification and classification of duplicated genes","text":"can use function pairs2kaks() calculate rates nonsynonymous substitutions per nonsynonymous site (Ka), synonymouys substitutions per synonymous site (Ks), ratios (Ka/Ks). rates calculated using Bioconductor package MSA2dist, implements codon models KaKs_Calculator 2.0 (Wang et al. 2010). purpose demonstration, calculate Ka, Ks, Ka/Ks 5 WGD-derived gene pairs. CDS WGD-derived genes obtained Ensembl Fungi (Yates et al. 2022), stored cds_scerevisiae.","code":"data(cds_scerevisiae) head(cds_scerevisiae)  # Store DNAStringSet object in a list cds_list <- list(Scerevisiae = cds_scerevisiae)  # Keep only top give gene pairs for demonstration purposes gene_pairs <- list(Scerevisiae = c_binary$Scerevisiae[1:5, ])  # Calculate Ka, Ks, and Ka/Ks kaks <- pairs2kaks(gene_pairs, cds_list)  # Inspect the output head(kaks)"},{"path":"/articles/doubletrouble_vignette.html","id":"identifying-and-visualizing-ks-peaks","dir":"Articles","previous_headings":"","what":"Identifying and visualizing Ks peaks","title":"Identification and classification of duplicated genes","text":"Peaks Ks distributions typically indicate whole-genome duplication (WGD) events, can identified fitting Gaussian mixture models (GMMs) Ks distributions. doubletrouble, can performed function find_ks_peaks(). However, saturation higher Ks values, recent WGD events can reliably identified Ks distributions (Vanneste, Van de Peer, Maere 2013). Recent WGD events commonly found plant species, maize, soybean, apple, etc. Although genomes yeast species signatures WGD, events ancient, hard find evidence using Ks distributions. 4 demonstrate can find peaks Ks distributions find_ks_peaks(), use data frame containing Ks values duplicate pairs soybean (Glycine max) genome, undergone 2 WGDs events ~13 ~58 million years ago (Schmutz et al. 2010). , visualize Ks distributions peaks using function plot_ks_peaks(). First , let’s look data quick look distribution. visual inspection, can see 2 3 peaks. Based prior knowledge, know 2 WGD events occurred ancestral Glycine genus ancestral Fabaceae, seem correspond peaks see Ks values around 0.1 0.5, respectively. third, flattened peak around 1.6, represent WGD shared eudicots. Let’s test number peaks support: 2 3. can see, presence 3 peaks supported (lowest BIC). function returns list mean, variance amplitude mixture components (.e., peaks), well Ks distribution . Now, suppose just want get first 2 peaks. can explictly saying find_ks_peaks() many peaks . Important consideration GMMs Ks distributions: Peaks identified GMMs blindly regarded “truth”. Using GMMs find peaks Ks distributions can lead problems overfitting overclustering (Tiley, Barker, Burleigh 2018). general recommendations : Use prior knowledge. know many peaks (e.g., based literature evidence), just tell number find_ks_peaks(). Likewise, sure many peaks , know maximum number peaks N, don’t test presence >N peaks. GMMs can incorrectly identify peaks actual number. Test significance peak SiZer (Significant ZERo crossings derivatives) maps (Chaudhuri Marron 1999). can done function SiZer() R package feature. example SiZer map, let’s use feature::SiZer() assess significance 2 peaks found previously. blue regions SiZer map indicate significantly increasing regions curve, support 2 peaks found.","code":"# Load data and inspect it data(gmax_ks) head(gmax_ks)  # Plot distribution library(ggplot2) ggplot(gmax_ks, aes(x = Ks)) +     geom_histogram(color = \"black\", fill = \"grey90\", bins = 50) +     theme_bw() # Find 2 and 3 peaks and test which one has more support peaks <- find_ks_peaks(gmax_ks$Ks, npeaks = 2:3, verbose = TRUE) names(peaks) str(peaks)  # Visualize Ks distribution plot_ks_peaks(peaks) # Find 2 peaks ignoring Ks values > 1 peaks <- find_ks_peaks(gmax_ks$Ks, npeaks = 2, max_ks = 1) plot_ks_peaks(peaks) # Get numeric vector of Ks values <= 1 ks <- gmax_ks$Ks[gmax_ks$Ks <= 1]  # Get SiZer map feature::SiZer(ks)"},{"path":"/articles/doubletrouble_vignette.html","id":"classifying-genes-by-age-groups","dir":"Articles","previous_headings":"","what":"Classifying genes by age groups","title":"Identification and classification of duplicated genes","text":"Finally, can use peaks obtained classify gene pairs age group. Age groups defined based Ks peak pairs belong. useful want analyze duplicate pairs specific WGD event, instance. can function split_pairs_by_peak(). function returns list containing classified pairs data frame, ggplot object age boundaries highlighted histogram Ks values.","code":"# Gene pairs without age-based classification head(gmax_ks)  # Classify gene pairs by age group pairs_age_group <- split_pairs_by_peak(gmax_ks, peaks)  # Inspecting the output names(pairs_age_group)  # Take a look at the classified gene pairs head(pairs_age_group$pairs)  # Visualize Ks distro with age boundaries pairs_age_group$plot"},{"path":"/articles/doubletrouble_vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Identification and classification of duplicated genes","text":"document created following conditions:","code":"sessioninfo::session_info()"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabrício Almeida-Silva. Author, maintainer. Yves Van de Peer. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Almeida-Silva F, Van de Peer Y (2022). doubletrouble: Identification classification duplicated genes. R package version 0.99.0, https://github.com/almeidasilvaf/doubletrouble.","code":"@Manual{,   title = {doubletrouble: Identification and classification of duplicated genes},   author = {Fabrício Almeida-Silva and Yves {Van de Peer}},   year = {2022},   note = {R package version 0.99.0},   url = {https://github.com/almeidasilvaf/doubletrouble}, }"},{"path":"/index.html","id":"doubletrouble-","dir":"","previous_headings":"","what":"Identification and classification of duplicated genes","title":"Identification and classification of duplicated genes","text":"major goal doubletrouble identify duplicated genes whole-genome protein sequences classify based modes duplication. simplest classification scheme two duplication modes: Whole-genome duplication (WGD); Small-scale duplication (SSD) detailed view duplication modes, users can also choose split SSD subcategories, available duplication modes : Whole-genome duplication (WGD); Tandem duplication (TD); Proximal duplication (PD); Transposed duplication (TRD); Dispersed duplication (DD). Besides classifying gene pairs, users can also classify genes, gene assigned unique mode duplication. Users can also calculate substitution rates per substitution site (.e., Ka Ks) duplicate pairs, find peaks Ks distributions Gaussian Mixture Models (GMMs), classify gene pairs age groups based Ks peaks.","code":""},{"path":"/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Identification and classification of duplicated genes","text":"Get latest stable R release CRAN. install doubletrouble Bioconductor using following code: development version GitHub :","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"doubletrouble\") BiocManager::install(\"almeidasilvaf/doubletrouble\")"},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Identification and classification of duplicated genes","text":"citation output using citation('doubletrouble') R. Please run check updates cite doubletrouble. Please note doubletrouble made possible thanks many R bioinformatics software authors, cited either vignettes /paper(s) describing package.","code":"print(citation('doubletrouble'), bibtex = TRUE) #>  #> To cite package 'doubletrouble' in publications use: #>  #>   Almeida-Silva F, Van de Peer Y (2022). _doubletrouble: Identification #>   and classification of duplicated genes_. R package version 0.99.0, #>   <https://github.com/almeidasilvaf/doubletrouble>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {doubletrouble: Identification and classification of duplicated genes}, #>     author = {Fabrício Almeida-Silva and Yves {Van de Peer}}, #>     year = {2022}, #>     note = {R package version 0.99.0}, #>     url = {https://github.com/almeidasilvaf/doubletrouble}, #>   }"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Identification and classification of duplicated genes","text":"Please note doubletrouble project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"development-tools","dir":"","previous_headings":"","what":"Development tools","title":"Identification and classification of duplicated genes","text":"Continuous code testing possible thanks GitHub actions usethis, remotes, rcmdcheck customized use Bioconductor’s docker containers BiocCheck. Code coverage assessment possible thanks codecov covr. documentation website automatically updated thanks pkgdown. code styled automatically thanks styler. documentation formatted thanks devtools roxygen2. details, check dev directory. package developed using biocthis.","code":""},{"path":"/reference/cds_scerevisiae.html","id":null,"dir":"Reference","previous_headings":"","what":"Coding sequences (CDS) of S. cerevisiae — cds_scerevisiae","title":"Coding sequences (CDS) of S. cerevisiae — cds_scerevisiae","text":"Data obtained Ensembl Fungi, CDS primary transcripts included.","code":""},{"path":"/reference/cds_scerevisiae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coding sequences (CDS) of S. cerevisiae — cds_scerevisiae","text":"","code":"data(cds_scerevisiae)"},{"path":"/reference/cds_scerevisiae.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Coding sequences (CDS) of S. cerevisiae — cds_scerevisiae","text":"DNAStringSet object CDS S. cerevisiae.","code":""},{"path":"/reference/cds_scerevisiae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coding sequences (CDS) of S. cerevisiae — cds_scerevisiae","text":"","code":"data(cds_scerevisiae)"},{"path":"/reference/classify_gene_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","title":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","text":"Classify duplicate gene pairs based modes duplication","code":""},{"path":"/reference/classify_gene_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","text":"","code":"classify_gene_pairs(   blast_list = NULL,   annotation = NULL,   evalue = 1e-10,   anchors = 5,   max_gaps = 25,   binary = FALSE,   proximal_max = 10,   blast_inter = NULL )"},{"path":"/reference/classify_gene_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","text":"blast_list list data frames containing BLAST tabular output intraspecies comparisons. list element corresponds BLAST output given species, names list elements must match names list elements annotation. BLASTp, DIAMOND simular programs must run processed sequence data returned process_input(). annotation processed GRangesList CompressedGRangesList object returned syntenet::process_input(). evalue Numeric scalar indicating E-value threshold. Default: 1e-10. anchors Numeric indicating minimum required number genes call syntenic block, syntenet::infer_syntenet. Default: 5. max_gaps Numeric indicating number upstream downstream genes search anchors, syntenet::infer_syntenet. Default: 25. binary Logical indicating whether perform binary classification (.e., whole-genome small-scale duplication) . FALSE, small-scale duplications subdivided tandem, proximal, dispersed duplications. Default: FALSE. proximal_max Numeric scalar maximum distance (number genes) two genes consider proximal duplicates. Default: 10. blast_inter list data frames containing BLAST tabular output comparison target species outgroups. Names list elements must match names list elements annotation. BLASTp, DIAMOND simular programs must run processed sequence data returned process_input().","code":""},{"path":"/reference/classify_gene_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","text":"list 3-column data frames duplicated gene pairs (columns 1 2), modes duplication (column 3).","code":""},{"path":"/reference/classify_gene_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify duplicate gene pairs based on their modes of duplication — classify_gene_pairs","text":"","code":"data(diamond_intra) data(diamond_inter) data(yeast_annot) data(yeast_seq) blast_list <- diamond_intra blast_inter <- diamond_inter  pdata <- syntenet::process_input(yeast_seq, yeast_annot) annot <- pdata$annotation[\"Scerevisiae\"]  # Binary classification scheme dup_binary <- classify_gene_pairs(blast_list, annot, binary = TRUE) table(dup_binary$Scerevisiae$type) #>  #>  SSD  WGD  #> 3246  342   # Expanded classification scheme dup_exp <- classify_gene_pairs(blast_list, annot) table(dup_exp$Scerevisiae$type) #>  #>   DD   PD   TD  WGD  #> 3124   80   42  342   # Full classification scheme annotation <- pdata$annotation dup_full <- classify_gene_pairs(     blast_list, annotation, blast_inter = blast_inter ) table(dup_full$Scerevisiae$type) #>  #>   DD   PD   TD  TRD  WGD  #> 3121   80   42    3  342"},{"path":"/reference/classify_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify genes into unique modes of duplication — classify_genes","title":"Classify genes into unique modes of duplication — classify_genes","text":"Classify genes unique modes duplication","code":""},{"path":"/reference/classify_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify genes into unique modes of duplication — classify_genes","text":"","code":"classify_genes(gene_pairs_list = NULL)"},{"path":"/reference/classify_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify genes into unique modes of duplication — classify_genes","text":"gene_pairs_list List classified gene pairs returned classify_gene_pairs().","code":""},{"path":"/reference/classify_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify genes into unique modes of duplication — classify_genes","text":"list 2-column data frames variables gene type representing gene ID duplication type, respectively.","code":""},{"path":"/reference/classify_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify genes into unique modes of duplication — classify_genes","text":"","code":"data(diamond_intra) data(yeast_annot) data(yeast_seq)  pdata <- syntenet::process_input(yeast_seq, yeast_annot) annot <- pdata$annotation[\"Scerevisiae\"] duplicates <- classify_gene_pairs(diamond_intra, annot) class_genes <- classify_genes(duplicates)"},{"path":"/reference/classify_ssd_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify small-scale duplication-derived gene pairs into subcategories — classify_ssd_pairs","title":"Classify small-scale duplication-derived gene pairs into subcategories — classify_ssd_pairs","text":"SSD-derived gene pairs classified tandem, proximal, dispersed duplicates (TD, PD, DD, respectively).","code":""},{"path":"/reference/classify_ssd_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify small-scale duplication-derived gene pairs into subcategories — classify_ssd_pairs","text":"","code":"classify_ssd_pairs(   ssd_pairs = NULL,   annotation_granges = NULL,   annotation = NULL,   proximal_max = 10,   blast_inter = NULL )"},{"path":"/reference/classify_ssd_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify small-scale duplication-derived gene pairs into subcategories — classify_ssd_pairs","text":"ssd_pairs 2-column data frame SSD-derived gene pairs. data frame can obtained filtering output get_wgd_pairs() keep rows type == \"SSD\". annotation_granges processed GRanges object element list returned syntenet::process_input(). annotation processed GRangesList CompressedGRangesList object returned syntenet::process_input(), must contain gene ranges species. proximal_max Numeric scalar maximum distance (number genes) two genes consider proximal duplicates. Default: 10. blast_inter list data frames containing tabular output interspecies BLAST/DIAMOND searches, returned run_diamond(). element must contain pairwise comparison target species outgroup, used identify duplicated genes derived transpositions (TRD). parameter NULL, function identify TRD genes.","code":""},{"path":"/reference/classify_ssd_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify small-scale duplication-derived gene pairs into subcategories — classify_ssd_pairs","text":"3-column data frame variables: dup1 Duplicated gene 1 dup2 Duplicated gene 2 type Duplication type, can \"TD\" (tandem duplication), \"PD\" (proximal duplication), \"TRD\" (transposed duplication), \"DD\" (dispersed duplication).","code":""},{"path":"/reference/classify_ssd_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify small-scale duplication-derived gene pairs into subcategories — classify_ssd_pairs","text":"","code":"data(diamond_intra) data(diamond_inter) data(yeast_annot) data(yeast_seq) blast_list <- diamond_intra blast_inter <- diamond_inter  # Get processed annotation for S. cerevisiae pdata <- annotation <- syntenet::process_input(yeast_seq, yeast_annot) annotation <- pdata$annotation[1]  # Get list of intraspecies anchor pairs anchor_pairs <- get_anchors_list(blast_list, annotation) anchor_pairs <- anchor_pairs[[1]][, 1:2]  # Get duplicate pairs from DIAMOND output and classify them duplicates <- diamond_intra[[1]][, 1:2] dups <- get_wgd_pairs(anchor_pairs, duplicates) ssd_pairs <- dups[dups$type == \"SSD\", ]  # Get GRanges annotation_granges <- pdata$annotation[[\"Scerevisiae\"]]  # Get annotation list annotation <- pdata$annotation  # Classify SSD-derived gene pairs ssd_classes <- classify_ssd_pairs(     ssd_pairs, annotation_granges, annotation, blast_inter = blast_inter )"},{"path":"/reference/diamond_inter.html","id":null,"dir":"Reference","previous_headings":"","what":"Interspecies DIAMOND output for yeast species — diamond_inter","title":"Interspecies DIAMOND output for yeast species — diamond_inter","text":"list contains similarity search S. cerevisiae C. glabrata, obtained run_diamond().","code":""},{"path":"/reference/diamond_inter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interspecies DIAMOND output for yeast species — diamond_inter","text":"","code":"data(diamond_inter)"},{"path":"/reference/diamond_inter.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Interspecies DIAMOND output for yeast species — diamond_inter","text":"list data frames (length 1) containing output DIAMOND search S. cerevisiae C. glabrata (outgroup).","code":""},{"path":"/reference/diamond_inter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interspecies DIAMOND output for yeast species — diamond_inter","text":"","code":"data(diamond_inter)"},{"path":"/reference/diamond_intra.html","id":null,"dir":"Reference","previous_headings":"","what":"Intraspecies DIAMOND output for S. cerevisiae — diamond_intra","title":"Intraspecies DIAMOND output for S. cerevisiae — diamond_intra","text":"List obtained run_diamond().","code":""},{"path":"/reference/diamond_intra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intraspecies DIAMOND output for S. cerevisiae — diamond_intra","text":"","code":"data(diamond_intra)"},{"path":"/reference/diamond_intra.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Intraspecies DIAMOND output for S. cerevisiae — diamond_intra","text":"list data frames (length 1) containing whole paranome S. cerevisiae resulting intragenome similarity searches.","code":""},{"path":"/reference/diamond_intra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intraspecies DIAMOND output for S. cerevisiae — diamond_intra","text":"","code":"data(diamond_intra)"},{"path":"/reference/find_ks_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Find peaks in a Ks distribution with Gaussian Mixture Models — find_ks_peaks","title":"Find peaks in a Ks distribution with Gaussian Mixture Models — find_ks_peaks","text":"Find peaks Ks distribution Gaussian Mixture Models","code":""},{"path":"/reference/find_ks_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find peaks in a Ks distribution with Gaussian Mixture Models — find_ks_peaks","text":"","code":"find_ks_peaks(ks, npeaks = 2, min_ks = 0.01, max_ks = 4, verbose = FALSE)"},{"path":"/reference/find_ks_peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find peaks in a Ks distribution with Gaussian Mixture Models — find_ks_peaks","text":"ks numeric vector Ks values. npeaks Numeric scalar indicating number peaks Ks distribution. know many peaks , can include range values, number peaks produces lowest BIC (Bayesian Information Criterion) selected optimal. Default: 2. min_ks Numeric scalar minimum Ks value. Removing small Ks values generally used avoid incorporation allelic /splice variants prevent fitting component infinity. Default: 0.01. max_ks Numeric scalar indicating maximum Ks value. Removing large Ks values usually performed account Ks saturation. Default: 4. verbose Logical indicating messages printed screen. Default: FALSE.","code":""},{"path":"/reference/find_ks_peaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find peaks in a Ks distribution with Gaussian Mixture Models — find_ks_peaks","text":"list following elements: mean Numeric estimated means. sd Numeric estimated standard deviations. lambda Numeric estimated mixture weights. ks Numeric vector filtered Ks distribution based arguments passed min_ks max_ks.","code":""},{"path":"/reference/find_ks_peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find peaks in a Ks distribution with Gaussian Mixture Models — find_ks_peaks","text":"","code":"data(scerevisiae_kaks) ks <- scerevisiae_kaks$Ks  # Find 2 peaks in Ks distribution peaks <- find_ks_peaks(ks, npeaks = 2)  # From 2 to 4 peaks, verbose = TRUE to show BIC values peaks <- find_ks_peaks(ks, npeaks = 2:4, verbose = TRUE) #> Optimal number of peaks: 4 #> Bayesian Information Criterion (BIC):  #>           E         V #> 2 -4806.157 -4294.228 #> 3 -4088.350 -3606.938 #> 4 -4103.106 -3384.324 #>  #> Top 3 models based on the BIC criterion:  #>       V,4       V,3       E,3  #> -3384.324 -3606.938 -4088.350"},{"path":"/reference/get_anchors_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a list of anchor pairs for each species — get_anchors_list","title":"Get a list of anchor pairs for each species — get_anchors_list","text":"Get list anchor pairs species","code":""},{"path":"/reference/get_anchors_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a list of anchor pairs for each species — get_anchors_list","text":"","code":"get_anchors_list(   blast_list = NULL,   annotation = NULL,   evalue = 1e-10,   anchors = 5,   max_gaps = 25 )"},{"path":"/reference/get_anchors_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a list of anchor pairs for each species — get_anchors_list","text":"blast_list list data frames containing BLAST tabular output intraspecies comparisons. list element corresponds BLAST output given species, names list elements must match names list elements annotation. BLASTp, DIAMOND simular programs must run processed sequence data returned process_input(). annotation processed GRangesList CompressedGRangesList object returned syntenet::process_input(). evalue Numeric scalar indicating E-value threshold. Default: 1e-10. anchors Numeric indicating minimum required number genes call syntenic block, syntenet::infer_syntenet. Default: 5. max_gaps Numeric indicating number upstream downstream genes search anchors, syntenet::infer_syntenet. Default: 25.","code":""},{"path":"/reference/get_anchors_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a list of anchor pairs for each species — get_anchors_list","text":"list data frames representing intraspecies anchor pairs.","code":""},{"path":"/reference/get_anchors_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a list of anchor pairs for each species — get_anchors_list","text":"","code":"data(diamond_intra) data(yeast_annot) data(yeast_seq) blast_list <- diamond_intra  # Get processed annotation for S. cerevisiae annotation <- syntenet::process_input(yeast_seq, yeast_annot)$annotation  # Get list of intraspecies anchor pairs anchorpairs <- get_anchors_list(blast_list, annotation)"},{"path":"/reference/get_transposed.html","id":null,"dir":"Reference","previous_headings":"","what":"Get transposed duplicate pairs — get_transposed","title":"Get transposed duplicate pairs — get_transposed","text":"Get transposed duplicate pairs","code":""},{"path":"/reference/get_transposed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get transposed duplicate pairs — get_transposed","text":"","code":"get_transposed(pairs, blast_inter, annotation)"},{"path":"/reference/get_transposed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get transposed duplicate pairs — get_transposed","text":"pairs 2-column data frame duplicated gene 1 2 columns 1 2, respectively. blast_inter list data frames length 1 containing BLAST tabular output comparison target species outgroup. Names list elements must match names list elements annotation. BLASTp, DIAMOND simular programs must run processed sequence data returned process_input(). annotation processed GRangesList CompressedGRangesList object returned syntenet::process_input().","code":""},{"path":"/reference/get_transposed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get transposed duplicate pairs — get_transposed","text":"3-column data frame following variables: dup1 Duplicated gene 1 dup2 Duplicated gene 2 type Duplication type, can either \"TRD\" (transposed duplication) \"DD\" (dispersed duplication).","code":""},{"path":"/reference/get_transposed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get transposed duplicate pairs — get_transposed","text":"","code":"data(diamond_inter) data(diamond_intra) data(yeast_seq) data(yeast_annot) blast_inter <- diamond_inter  # Get processed annotation pdata <- syntenet::process_input(yeast_seq, yeast_annot) annotation <- pdata$annotation  # Get duplicated pairs annot <- pdata$annotation[\"Scerevisiae\"]  pairs_all <- classify_gene_pairs(diamond_intra, annot) pairs <- pairs_all$Scerevisiae[pairs_all$Scerevisiae$type == \"DD\", 1:2]  trd <- get_transposed(pairs, blast_inter, annotation)"},{"path":"/reference/get_wgd_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get gene pairs derived from whole-genome and small-scale duplications — get_wgd_pairs","title":"Get gene pairs derived from whole-genome and small-scale duplications — get_wgd_pairs","text":"Get gene pairs derived whole-genome small-scale duplications","code":""},{"path":"/reference/get_wgd_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get gene pairs derived from whole-genome and small-scale duplications — get_wgd_pairs","text":"","code":"get_wgd_pairs(anchor_pairs = NULL, duplicate_pairs = NULL)"},{"path":"/reference/get_wgd_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get gene pairs derived from whole-genome and small-scale duplications — get_wgd_pairs","text":"anchor_pairs 2-column data frame anchor pairs columns 1 2. duplicate_pairs 2-column data frame duplicate pairs. equivalent first 2 columns tabular output BLAST-like programs.","code":""},{"path":"/reference/get_wgd_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get gene pairs derived from whole-genome and small-scale duplications — get_wgd_pairs","text":"3-column data frame variables: dup1 Duplicated gene 1 dup2 Duplicated gene 2 type Duplication type, can either \"WGD\" (whole-genome duplication) \"SSD\" (small-scale duplication).","code":""},{"path":"/reference/get_wgd_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get gene pairs derived from whole-genome and small-scale duplications — get_wgd_pairs","text":"","code":"data(diamond_intra) data(yeast_annot) data(yeast_seq) blast_list <- diamond_intra  # Get processed annotation for S. cerevisiae annotation <- syntenet::process_input(yeast_seq, yeast_annot)$annotation[1]  # Get list of intraspecies anchor pairs anchor_pairs <- get_anchors_list(blast_list, annotation) anchor_pairs <- anchor_pairs[[1]][, 1:2]  # Get duplicate pairs from DIAMOND output duplicates <- diamond_intra[[1]][, 1:2] dups <- get_wgd_pairs(anchor_pairs, duplicates)"},{"path":"/reference/gmax_ks.html","id":null,"dir":"Reference","previous_headings":"","what":"Duplicate pairs and Ks values for Glycine max — gmax_ks","title":"Duplicate pairs and Ks values for Glycine max — gmax_ks","text":"data set obtained classify_gene_pairs() followed pairs2kaks().","code":""},{"path":"/reference/gmax_ks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duplicate pairs and Ks values for Glycine max — gmax_ks","text":"","code":"data(gmax_ks)"},{"path":"/reference/gmax_ks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Duplicate pairs and Ks values for Glycine max — gmax_ks","text":"data frame following variables: dup1 Character, duplicated gene 1. dup2 Character, duplicated gene 2. Ks Numeric, Ks values.","code":""},{"path":"/reference/gmax_ks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Duplicate pairs and Ks values for Glycine max — gmax_ks","text":"","code":"data(gmax_ks)"},{"path":"/reference/pairs2kaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Ka, Ks, and Ka/Ks from duplicate gene pairs — pairs2kaks","title":"Calculate Ka, Ks, and Ka/Ks from duplicate gene pairs — pairs2kaks","text":"Calculate Ka, Ks, Ka/Ks duplicate gene pairs","code":""},{"path":"/reference/pairs2kaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Ka, Ks, and Ka/Ks from duplicate gene pairs — pairs2kaks","text":"","code":"pairs2kaks(gene_pairs_list, cds, model = \"MYN\", threads = 1)"},{"path":"/reference/pairs2kaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Ka, Ks, and Ka/Ks from duplicate gene pairs — pairs2kaks","text":"gene_pairs_list List data frames containing duplicated gene pairs returned classify_gene_pairs(). cds List DNAStringSet objects containing coding sequences gene. model Character scalar indicating codon model use. Possible values \"Li\", \"NG86\", \"NG\", \"LWL\", \"LPB\", \"MLWL\", \"MLPB\", \"GY\", \"YN\", \"MYN\", \"MS\", \"MA\", \"GNG\", \"GLWL\", \"GLPB\", \"GMLWL\", \"GMLPB\", \"GYN\", \"GMYN\". Default: \"MYN\". threads Numeric scalar indicating number threads use. Default: 1.","code":""},{"path":"/reference/pairs2kaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Ka, Ks, and Ka/Ks from duplicate gene pairs — pairs2kaks","text":"list data frames containing gene pairs Ka, Ks, Ka/Ks values.","code":""},{"path":"/reference/pairs2kaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Ka, Ks, and Ka/Ks from duplicate gene pairs — pairs2kaks","text":"","code":"data(diamond_intra) data(diamond_inter) data(yeast_annot) data(yeast_seq) data(cds_scerevisiae) blast_list <- diamond_intra blast_inter <- diamond_inter  pdata <- syntenet::process_input(yeast_seq, yeast_annot) annot <- pdata$annotation[\"Scerevisiae\"]  # Binary classification scheme gene_pairs_list <- classify_gene_pairs(blast_list, annot, binary = TRUE) gene_pairs_list <- list(Scerevisiae = gene_pairs_list[[1]][1:5, ])  cds <- list(Scerevisiae = cds_scerevisiae)  kaks <- pairs2kaks(gene_pairs_list, cds)"},{"path":"/reference/plot_ks_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot histogram of Ks distribution with peaks — plot_ks_peaks","title":"Plot histogram of Ks distribution with peaks — plot_ks_peaks","text":"Plot histogram Ks distribution peaks","code":""},{"path":"/reference/plot_ks_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot histogram of Ks distribution with peaks — plot_ks_peaks","text":"","code":"plot_ks_peaks(peaks = NULL, binwidth = 0.05)"},{"path":"/reference/plot_ks_peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot histogram of Ks distribution with peaks — plot_ks_peaks","text":"peaks list elements mean, sd, lambda, ks, returned function fins_ks_peaks(). binwidth Numeric scalar binwidth histogram. Default: 0.05.","code":""},{"path":"/reference/plot_ks_peaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot histogram of Ks distribution with peaks — plot_ks_peaks","text":"ggplot object histogram lines Ks peak.","code":""},{"path":"/reference/plot_ks_peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot histogram of Ks distribution with peaks — plot_ks_peaks","text":"","code":"data(scerevisiae_kaks) ks <- scerevisiae_kaks$Ks  # Find 2 peaks in Ks distribution peaks <- find_ks_peaks(ks, npeaks = 2)  # Plot plot_ks_peaks(peaks, binwidth = 0.05)"},{"path":"/reference/scerevisiae_kaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Duplicate pairs and Ka, Ks, and Ka/Ks values for S. cerevisiae — scerevisiae_kaks","title":"Duplicate pairs and Ka, Ks, and Ka/Ks values for S. cerevisiae — scerevisiae_kaks","text":"data set obtained classify_gene_pairs() followed pairs2kaks().","code":""},{"path":"/reference/scerevisiae_kaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duplicate pairs and Ka, Ks, and Ka/Ks values for S. cerevisiae — scerevisiae_kaks","text":"","code":"data(scerevisiae_kaks)"},{"path":"/reference/scerevisiae_kaks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Duplicate pairs and Ka, Ks, and Ka/Ks values for S. cerevisiae — scerevisiae_kaks","text":"data frame following variables: dup1 Character, duplicated gene 1. dup2 Character, duplicated gene 2. Ka Numeric, Ka values. Ks Numeric, Ks values. Ka_Ks Numeric, Ka/Ks values. type Character, mode duplication","code":""},{"path":"/reference/scerevisiae_kaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Duplicate pairs and Ka, Ks, and Ka/Ks values for S. cerevisiae — scerevisiae_kaks","text":"","code":"data(scerevisiae_kaks)"},{"path":"/reference/split_pairs_by_peak.html","id":null,"dir":"Reference","previous_headings":"","what":"Split gene pairs based on their Ks peaks — split_pairs_by_peak","title":"Split gene pairs based on their Ks peaks — split_pairs_by_peak","text":"purpose function classify gene pairs age 2+ Ks peaks. way, newer gene pairs found within certain number standard deviations highest peak, older genes found close within smaller peaks.","code":""},{"path":"/reference/split_pairs_by_peak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split gene pairs based on their Ks peaks — split_pairs_by_peak","text":"","code":"split_pairs_by_peak(ks_df, peaks, nsd = 2, binwidth = 0.05)"},{"path":"/reference/split_pairs_by_peak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split gene pairs based on their Ks peaks — split_pairs_by_peak","text":"ks_df 3-column data frame gene pairs columns 1 2, Ks values gene pair column 3. peaks list mean, standard deviation, amplitude Ks peaks generated find_ks_peaks. nsd Numeric number standard deviations consider peak. binwidth Numeric scalar binwidth histogram. Default: 0.05.","code":""},{"path":"/reference/split_pairs_by_peak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split gene pairs based on their Ks peaks — split_pairs_by_peak","text":"list following elements: pairs 4-column data frame variables dup1 (character), dup2 (character), ks (numeric), peak (numeric), representing duplicate gene pair, Ks values, peak ID, respectively. plot ggplot object Ks peaks returned plot_ks_peaks, dashed red lines indicating boundaries peak.","code":""},{"path":"/reference/split_pairs_by_peak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split gene pairs based on their Ks peaks — split_pairs_by_peak","text":"","code":"data(scerevisiae_kaks)  # Create a data frame of duplicate pairs and Ks values ks_df <- scerevisiae_kaks[, c(\"dup1\", \"dup2\", \"Ks\")]  # Create list of peaks peaks <- find_ks_peaks(ks_df$Ks, npeaks = 2)  # Split pairs spairs <- split_pairs_by_peak(ks_df, peaks)"},{"path":"/reference/yeast_annot.html","id":null,"dir":"Reference","previous_headings":"","what":"Genome annotation of the yeast species S. cerevisiae and C. glabrata — yeast_annot","title":"Genome annotation of the yeast species S. cerevisiae and C. glabrata — yeast_annot","text":"Data obtained Ensembl Fungi. annotation data primary transcripts included.","code":""},{"path":"/reference/yeast_annot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genome annotation of the yeast species S. cerevisiae and C. glabrata — yeast_annot","text":"","code":"data(yeast_annot)"},{"path":"/reference/yeast_annot.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Genome annotation of the yeast species S. cerevisiae and C. glabrata — yeast_annot","text":"CompressedGRangesList containing elements Scerevisiae Cglabrata.","code":""},{"path":"/reference/yeast_annot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genome annotation of the yeast species S. cerevisiae and C. glabrata — yeast_annot","text":"","code":"data(yeast_annot)"},{"path":"/reference/yeast_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Protein sequences of the yeast species S. cerevisiae and C. glabrata — yeast_seq","title":"Protein sequences of the yeast species S. cerevisiae and C. glabrata — yeast_seq","text":"Data obtained Ensembl Fungi. translated sequences primary transcripts included.","code":""},{"path":"/reference/yeast_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Protein sequences of the yeast species S. cerevisiae and C. glabrata — yeast_seq","text":"","code":"data(yeast_seq)"},{"path":"/reference/yeast_seq.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Protein sequences of the yeast species S. cerevisiae and C. glabrata — yeast_seq","text":"list AAStringSet objects elements Scerevisiae Cglabrata.","code":""},{"path":"/reference/yeast_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Protein sequences of the yeast species S. cerevisiae and C. glabrata — yeast_seq","text":"","code":"data(yeast_seq)"},{"path":"/news/index.html","id":"doubletrouble-0990","dir":"Changelog","previous_headings":"","what":"doubletrouble 0.99.0","title":"doubletrouble 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package.","code":""}]
